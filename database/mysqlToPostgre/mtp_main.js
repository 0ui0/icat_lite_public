// Generated by CoffeeScript 2.6.1
var DataTypes, DbInit, QueryTypes, Sequelize, config;

({Sequelize, DataTypes, QueryTypes} = require('sequelize'));

config = require("../../config/config");

DbInit = require("../db_main").init;

console.log = console.log;

(async function() {
  var cmd1, cmd2, err, i, importDataToTable, info, infos, j, k, key, l, len, len1, len2, len3, len4, len5, list1, list2, m, mysql, n, pgForce, postgre, queryInterface1, queryInterface2, ref, seq1, seq2, table, tableName, tableNames, tables;
  try {
    global.offMd5PassWord = true;
    pgForce = false;
    if (!pgForce) {
      console.log("【警告】没有重置pg数据库，将从当前进度开始");
    }
    console.log("===加载数据库中===");
    seq1 = new Sequelize({
      connectionLimit: 10,
      host: "localhost",
      port: 3306,
      username: "",
      database: "",
      password: "",
      dialect: "mysql",
      logging: function(msg) {
        var err;
        try {

        } catch (error) {
          err = error;
          return console.log(err);
        }
      }
    });
    seq2 = new Sequelize({
      connectionLimit: 10,
      host: "localhost",
      port: 5432,
      username: "",
      database: "",
      password: "",
      dialect: "postgres",
      logging: function(msg) {
        var err;
        try {

        } catch (error) {
          err = error;
          return console.log(err);
        }
      }
    });
    seq1.cmd = async function(cmd, config) {
      return (await seq1.query(cmd, {
        type: QueryTypes.SELECT,
        ...config
      }));
    };
    seq2.cmd = async function(cmd, config) {
      return (await seq2.query(cmd, {
        type: QueryTypes.SELECT,
        ...config
      }));
    };
    queryInterface1 = seq1.getQueryInterface();
    queryInterface2 = seq1.getQueryInterface();
    list1 = (await seq1.cmd("select concat('alter table ',table_name,' drop foreign key ',constraint_name,';') from information_schema.table_constraints where constraint_type='FOREIGN KEY' and table_schema='icat_bbs';"));
    list2 = (await seq1.cmd("select concat('alter table ',table_name,' modify ',column_name,' int auto_increment;') from information_schema.columns where column_key='PRI' and table_schema='icat_bbs';"));
    for (i = 0, len = list1.length; i < len; i++) {
      cmd1 = list1[i];
      await seq1.query(Object.entries(cmd1)[0][1].trim());
    }
    for (j = 0, len1 = list2.length; j < len1; j++) {
      cmd2 = list2[j];
      await seq1.query(Object.entries(cmd2)[0][1].trim());
    }
    tables = (await seq1.cmd("show tables"));
    if (tables) {
      tables = tables.map((table) => {
        return Object.entries(table)[0][1];
      });
    }
    for (k = 0, len2 = tables.length; k < len2; k++) {
      table = tables[k];
      infos = (await queryInterface1.describeTable(table));
      ref = Object.entries(infos);
      for (l = 0, len3 = ref.length; l < len3; l++) {
        [key, info] = ref[l];
        if (info.type === "INT UNSIGNED") {
          await queryInterface1.changeColumn(table, key, {
            type: Sequelize.INTEGER
          });
        }
      }
    }
    mysql = (await DbInit(seq1));
    postgre = (await DbInit(seq2, true, pgForce));
    console.log("===数据库清除并加载完毕===");
    importDataToTable = async function(tableName) {
      var limit, m, needOffset, primaryKeyName, ref1, results, rows, time, times;
      console.log(`===导入${tableName}数据===`);
      console.log("尝试获取用户表总数");
      rows = (await mysql[tableName].count());
      needOffset = (await postgre[tableName].count());
      if (!needOffset) {
        needOffset = 0;
      }
      limit = 3000;
      times = (rows - needOffset) / limit ? Math.ceil((rows - needOffset) / limit) : 1;
      console.log(`单次导入条数：${limit}`);
      console.log(`导入次数：${times}`);
      console.log(`数据条数：${rows}`);
      console.log(`已经插入：${needOffset}`);
      primaryKeyName = (Object.entries((await queryInterface2.describeTable(tableName))).filter(([key, info]) => {
        return info.primaryKey === true;
      }))[0][0];
      console.log("primaryKeyName--", primaryKeyName);
      results = [];
      for (time = m = 0, ref1 = times - 1; (0 <= ref1 ? m <= ref1 : m >= ref1); time = 0 <= ref1 ? ++m : --m) {
        results.push((await (async(time) => {
          var data;
          console.log(`正在从已插入的${needOffset}条数据起导入第${time}份数据，共${times}份`);
          data = (await mysql[tableName].findAll({
            offset: needOffset + time * limit,
            limit: limit
          }));
          if (data) {
            await postgre[tableName].bulkCreate(JSON.parse(JSON.stringify(data)), {
              updateOnDuplicate: [primaryKeyName]
            });
            return data = null;
          }
        })(time)));
      }
      return results;
    };
    tableNames = Object.keys(postgre).filter((name) => {
      return /icat_/g.exec(name) && ["icat_users", "icat_users_extend", "icat_relations", "icat_maps_events", "icat_cache_linkids", "icat_cache_pids", "icat_cache_ips"].indexOf(name) === -1;
    });
    tableNames = ["icat_users", "icat_users_extend", ...tableNames, "icat_relations", "icat_maps_events"];
    for (m = 0, len4 = tableNames.length; m < len4; m++) {
      tableName = tableNames[m];
      await (async(tableName) => {
        return (await importDataToTable(tableName));
      })(tableName);
    }
//更新主键序列
    for (n = 0, len5 = tableNames.length; n < len5; n++) {
      tableName = tableNames[n];
      await (async(tableName) => {
        var len6, o, ref1, results;
        infos = (await queryInterface1.describeTable(tableName));
        ref1 = Object.entries(infos);
        results = [];
        for (o = 0, len6 = ref1.length; o < len6; o++) {
          [key, info] = ref1[o];
          if (info.primaryKey) {
            console.log(`准备更新${tableName}_${key}_seq序列`);
            results.push((await seq2.query(`select setval('"${tableName}_${key}_seq"', (select max(${tableName}."${key}") from ${tableName}))`)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      })(tableName);
    }
    console.log("===完成===");
    return global.offMd5PassWord = false;
  } catch (error) {
    err = error;
    console.log("【错误】导入失败");
    return console.log(err);
  }
})();
