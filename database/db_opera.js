// Generated by CoffeeScript 2.6.1
var DB, Opera, checkType, config, db, fs, listen, pathLib, query, seqLib, sleep;

seqLib = require("sequelize");

pathLib = require("path");

fs = require("fs-extra");

config = require("../config/config");

checkType = require("icat_checktype");

sleep = require("icat_sleep");

//封装的数据库访问层，暂时用不到
listen = function(varName, callback) {
  checkType(arguments, ["string", "function"], "listen");
  return `let last = ${varName}
setInterval(async function(){
  if(last !== ${varName}){
    let returnVal = await (${callback.toString()})(${varName})
    
    if(returnVal === true){
      last = ${varName}
    }else if(returnVal === false){
      ${varName} = last
    }else{
      ${varName} = returnVal
      last = ${varName}
    }
  }
})`;
};

query = async function(db, cmd, replace) {
  checkType(arguments, ["object", "string", ["object", "array", "undefined"]]);
  return (await db.query(cmd, {
    replacements: replace || [],
    type: seqLib.QueryTypes.SELECT
  }));
};

Opera = class {
  constructor(data) {
    this.data = data;
  }

};

DB = class {
  constructor(config1) {
    this.config = config1;
    (async() => {
      var err, i, len, table, tables;
      try {
        this.seq = new seqLib.Sequelize({
          dialect: "mysql",
          database: this.config.db,
          username: this.config.user,
          password: this.config.pass,
          port: this.config.port
        });
        this.main = Object.create(null);
        tables = (await query(this.seq, "show tables"));
        tables = tables.map(function(obj) {
          return Object.values(obj)[0];
        });
        for (i = 0, len = tables.length; i < len; i++) {
          table = tables[i];
          await (async(table) => {
            var field, fields, j, len1, results;
            this.main[table] = async(...args) => { //箭头函数没有arguments对象
              var filter, max, min, order, orderBy;
              if (args.length === 0) {
                return (await query(this.seq, `SELECT * FROM \`${table}\``));
              } else {
                ({min = 0, max = 9999, orderBy = void 0, order = "DESC", filter = void 0} = args[0] || {});
                if (orderBy === void 0) {
                  throw new Error("miss orderBy");
                }
                return (await query(this.seq, `SELECT *
FROM '${table}'
ORDER BY ${orderBy} ${order}
LIMIT ${min},${max}
${filter ? "where " : ""}`));
              }
            };
            fields = (await query(this.seq, `select \`COLUMN_NAME\` from information_schema.COLUMNS where table_name = '${table}'`));
            fields = fields.map((item) => {
              return Object.values(item)[0];
            });
            results = [];
            for (j = 0, len1 = fields.length; j < len1; j++) {
              field = fields[j];
              results.push(((field) => {
                return this.main[table]["#" + field] = async() => {
                  return (await query(this.seq, `select \`${field}\` from ${table}`));
                };
              })(field));
            }
            return results;
          })(table);
        }
        return console.log((await this.main.icat_users["#uid"]()));
      } catch (error) {
        err = error;
        return console.log(err);
      }
    })();
  }

  init(obj) {
    var copyObj;
    return copyObj = async function(obj) {
      var key, level, results, typeOfValue, value;
      level = 0;
      results = [];
      for (key in obj) {
        value = obj[key];
        typeOfValue = Object.prototype.toString.call(value);
        //if ["[Object String]","Object Number","Object Boolean"].some((type)->type is typeOfValue)
        if (typeOfValue === "[Object String]") {
          obj[key] = value;
        }
        if (typeOfValue === "[Object Number]") {
          obj[key] = value;
        }
        if (typeOfValue === "[Object Boolean]") {
          obj[key] = value;
        }
        if (typeOfValue === "[Object object]") {
          results.push((await copyObj(value)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
  }

};

db = new DB({
  db: config.db.database,
  user: config.db.user,
  pass: config.db.password,
  port: config.db.port
});
