// Generated by CoffeeScript 2.6.1
var DataTypes, Model, Sequelize, db, fs, mysql, pathLib, sqlite;

mysql = require("./db_mysql");

//sqlite = require "./db_sqlite"
sqlite = mysql;

fs = require("fs-extra");

pathLib = require("path");

({Sequelize, DataTypes, Model} = require('sequelize'));

db = {
  seq: mysql,
  mysql: mysql,
  sqlite: sqlite,
  inited: false,
  init: async function(db, stopInitData, force, alterAll) {
    var _this, err, files, i, j, k, l, len, len1, len2, len3, setRelations, str;
    _this = this;
    if (db) { //如果传入db，需要new，是构造函数，返回一个新对象
      _this = {};
      _this.seq = mysql;
      _this.mysql = mysql = db;
      _this.sqlite = sqlite;
      _this.inited = false;
    }
    if (_this.inited) {
      return;
    }
    try {
      //自动开启gin扩展
      await mysql.query("CREATE EXTENSION IF NOT EXISTS pg_trgm;", {
        raw: true
      });
      global.pgTrgm = true;
    } catch (error) {
      err = error;
      console.log("pg_trgm扩展安装失败，请检查是否有该扩展的安装程序");
    }
    // 模型定义加载
    files = fs.readdirSync(pathLib.resolve(`${__dirname}/tables`));
    files = files.filter((str) => {
      return str.match(/\.js/g);
    });
    files = files.map((str) => {
      return str.replace(".js", "");
    });
//添加表到这里
    for (i = 0, len = files.length; i < len; i++) {
      str = files[i];
      str = str.replace(".js", "");
      _this[str] = require(`./tables/${str}`)(mysql);
    }
    
    //设置关联
    setRelations = require("./db_setRelations");
    await setRelations(_this);
    console.log("主数据库同步开始");
    if (!alterAll && !force) {
      for (j = 0, len1 = files.length; j < len1; j++) {
        str = files[j];
        if (["icat_posts", "icat_users", "icat_users_extend", "icat_files", "icat_credits_calc", "icat_relations"].indexOf(str) === -1) {
          console.log(str);
          await _this[str].sync({
            alter: true
          });
        }
      }
    }
    //同步
    console.log("database force:" + force);
    if (force) {
      await mysql.sync({
        force: true
      });
    } else {
      if (alterAll) {
        await mysql.sync({
          alter: true
        });
      }
    }
    //不要启动await mysql.sync {force:yes}
    //console.log (await icat_users.findAll({include:icat_users_extend}))

    //初始化数据
    if (!stopInitData) {
      await require("./init/db_init")(_this);
    }
    // 更新统计
    //dbUpdate = require "./db_update"
    //await dbUpdate()

    // ==========================

    // 初始化sqllite 
    console.log("缓存数据库同步开始");
    files = fs.readdirSync(pathLib.resolve(`${__dirname}/tables_sqlite`));
    files = files.filter((str) => {
      return str.match(/\.js/g);
    });
    files = files.map((str) => {
      return str.replace(".js", "");
    });
//添加表到这里
    for (k = 0, len2 = files.length; k < len2; k++) {
      str = files[k];
      str = str.replace(".js", "");
      _this[str] = require(`./tables_sqlite/${str}`)(sqlite);
    }
    if (!alterAll) {
      for (l = 0, len3 = files.length; l < len3; l++) {
        str = files[l];
        if (["icat_cache_ips", "icat_cache_linkids", "icat_cache_pids"].indexOf(str) !== -1) {
          console.log(str);
          await _this[str].sync({
            alter: true
          });
        }
      }
    } else {
      await sqlite.sync({
        alter: true //变成mysql以后不能使用force，否则会清空数据库
      });
    }
    _this.inited = true;
    if (db) {
      return _this;
    }
  }
};

module.exports = db;
