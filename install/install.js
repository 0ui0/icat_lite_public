// Generated by CoffeeScript 2.6.1
var Boom, Hapi, Iron, fs, initApi, pathLib, server;

Hapi = require("@hapi/hapi");

initApi = require("./apis/initApi");

global.argCfg = {};

global.Joi = require("joi");

fs = require("fs-extra");

pathLib = require("path");

Iron = require("@hapi/iron");

Boom = require("@hapi/boom");

server = Hapi.server({
  port: 8195,
  host: "0.0.0.0",
  routes: {
    validate: {
      //统一joi校验失败处理
      failAction: function(req, h, err) {
        var ref, ref1, ref2, ref3;
        console.error(err);
        return h.response({
          ok: false,
          msg: "*错误*：" + (((ref = err.details) != null ? ref[0].message : void 0) ? (ref1 = err.details) != null ? ref1[0].message : void 0 : (ref2 = err.output) != null ? (ref3 = ref2.payload) != null ? ref3.message : void 0 : void 0)
        }).takeover();
      }
    },
    cors: {
      credentials: true,
      origin: ["http://localhost:8181", "http://localhost"]
    }
  }
});

(async() => {
  await server.register(require("@hapi/inert"));
  initApi(server);
  server.route({
    method: 'get',
    path: "/{param*}",
    handler: {
      directory: {
        path: './front/dist'
      }
    },
    options: {
      auth: false
    }
  });
  server.auth.scheme("authScheme", (server, options) => {
    return {
      authenticate: async(req, h) => {
        var cookieVerify, err, tmp, verifyCookie;
        try {
          verifyCookie = async(data) => {
            var cookie, err, installed, tmp;
            try {
              installed = (await (async function() {
                try {
                  tmp = (await fs.readFile(pathLib.resolve("./installed.json")));
                  if (tmp) {
                    return tmp = JSON.parse(tmp.toString());
                  } else {
                    return false;
                  }
                } catch (error) {
                  err = error;
                  return false;
                }
              })());
              if ((data != null ? data.install : void 0) && installed) {
                cookie = (await Iron.unseal(data.install, installed.cookiePwd, Iron.defaults));
                if (Date.now() - cookie.timestamp < 10 * 3600 * 1000 && cookie.login === true) {
                  return cookie;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            } catch (error) {
              err = error;
              console.log(err);
              return false;
            }
          };
          cookieVerify = (await verifyCookie(req.state));
          if (cookieVerify) {
            tmp = h.authenticated({
              credentials: {},
              artifact: cookieVerify
            });
            return tmp;
          } else {
            throw Boom.unauthorized(null, 'cookie');
          }
        } catch (error) {
          err = error;
          throw err;
        }
      }
    };
  });
  server.auth.strategy("authStrategy", "authScheme", {});
  server.auth.default("authStrategy");
  await server.start();
  console.log(`${server.info.uri}`);
  return console.log("启动成功，请前往 http://你的网址:8195 进行安装");
})();
