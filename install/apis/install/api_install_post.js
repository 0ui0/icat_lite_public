// Generated by CoffeeScript 2.6.1
var Iron, fs, pathLib;

fs = require("fs-extra");

pathLib = require("path");

Iron = require("@hapi/iron");

module.exports = function(server) {
  return server.route({
    path: "/",
    method: "post",
    options: {
      auth: {
        mode: "try"
      },
      validate: {
        payload: Joi.object({
          pwdKey: Joi.string().min(32).max(108).error(new Error("密码加密密钥至少32位")),
          cookiePwd: Joi.string().min(32).max(108).error(new Error("登录状态密钥至少32位")),
          dbUser: Joi.string().error(new Error("数据库用户不能为空")),
          dbName: Joi.string().error(new Error("数据库名不能为空")),
          dbPassword: Joi.string().error(new Error("数据库密码不能为空")),
          dbPort: Joi.number().port().error(new Error("数据库端口不能为空")),
          dbHost: Joi.string().error(new Error("数据库主机不能为空")),
          panelPwd: Joi.string().min(8).error(new Error("面板访问密码至少8位")),
          initDb: Joi.boolean()
        })
      }
    },
    handler: async function(req, h) {
      var cookieStr, err, hasConfig, que;
      try {
        que = req.payload;
        que.startCmd = `node serve.js --dbHost ${que.dbHost} --dbPort ${que.dbPort} --dbName ${que.dbName} --dbUser ${que.dbUser} --dbPassword ${que.dbPassword} --pwdKey ${que.pwdKey} --cookiePwd ${que.cookiePwd} --alterAll`;
        hasConfig = (await (async function() {
          try {
            return (await fs.stat(pathLib.resolve("./installed.json")));
          } catch (error) {
            err = error;
            return false;
          }
        })());
        if (hasConfig) {
          return {
            ok: false,
            msg: "安装配置已存在，无法安装，请先删除"
          };
        } else {
          await fs.writeFile(pathLib.resolve("./installed.json"), JSON.stringify(que));
          console.log("写入installed.json成功");
        }
        cookieStr = (await Iron.seal({
          login: true,
          timestamp: Date.now()
        }, que.cookiePwd, Iron.defaults));
        if (que.initDb) {
          (async() => {
            var tmp;
            try {
              tmp = (await req.server.inject({
                url: "/database/init",
                method: "post",
                auth: {
                  strategy: "authStrategy",
                  credentials: cookieStr
                }
              }));
              return console.log(tmp);
            } catch (error) {
              err = error;
              return console.log(err);
            }
          })();
        }
        h.state("install", cookieStr, {
          path: "/",
          isHttpOnly: false,
          isSecure: false
        });
        return {
          ok: true,
          msg: "安装配置创建成功"
        };
      } catch (error) {
        err = error;
        console.log(err);
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  });
};
