// Generated by CoffeeScript 2.6.1
var DataTypes, Sequelize, childProcess, fs, installData, luxon, pathLib;

fs = require("fs-extra");

pathLib = require("path");

installData = require("../../install_data");

childProcess = require("child_process");

luxon = require("luxon");

({Sequelize, DataTypes} = require('sequelize'));

module.exports = (server) => {
  return server.route({
    method: "post",
    path: "/database/start",
    handler: async function(req, h) {
      var err, installed, tmp;
      try {
        console.log("database启动中");
        //导入安装配置
        installed = (await fs.readFile(pathLib.resolve("./installed.json")));
        installed = JSON.parse(installed.toString());
        //installData.dbProcess = childProcess.spawn "pg_ctl",["-D","$PREFIX/data","-l","logfile","start"],
        if (installData.database) { //先结束再启动
          installData.database.send("/Users/miao/pgsql/bin/pg_ctl -D /Users/miao/pgsql/data -l /Users/miao/pgsql/logfile stop");
        }
        tmp = (await new Promise((res, rej) => {
          return childProcess.exec("pkill -f postgres", function(err, stdout, stderr) {
            return res(JSON.stringify({
              exec: "pkill -f postgres",
              err: err,
              stdout: stdout,
              stderr: stderr
            }, null, "\t"));
          });
        }));
        if (installData.database) {
          installData.database.log(tmp);
          installData.database.log("已用上述命令试图结束全系统postgre服务");
          installData.database.log("准备启动新服务...");
          installData.database.kill();
        }
        installData.database = new installData.Process(childProcess.spawn("/bin/bash", [], {
          shell: true,
          cwd: "/Users/miao/pgsql/bin"
        }));
        installData.database.send("su - postgres");
        installData.database.send("/Users/miao/pgsql/bin/pg_ctl -D /Users/miao/pgsql/data -l /Users/miao/pgsql/logfile start");
        if (installData.seq == null) {
          installData.seq = new Sequelize({
            host: installed.dbHost,
            database: "miaoctr",
            username: "miaoctr",
            password: installed.dbPassword,
            port: installed.dbPort,
            dialect: "postgres",
            connectionLimit: 10,
            logging: function(msg) {
              var err;
              try {

              } catch (error) {
                //console.log msg
                //await fsp.appendFile pathLib.resolve("./database/db_log.sql"),(msg+"\n"+"======="+"\n")
                err = error;
                return console.log(err);
              }
            }
          });
        }
        //延迟一下
        await new Promise(function(res) {
          return setTimeout(() => {
            return res();
          }, 500);
        });
        return {
          ok: true,
          msg: "服务启动成功"
        };
      } catch (error) {
        //return h.redirect "/"
        err = error;
        console.log(err);
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  });
};
