// Generated by CoffeeScript 2.6.1
var childProcess, fs, installData, pathLib;

fs = require("fs-extra");

pathLib = require("path");

installData = require("../../install_data");

childProcess = require("child_process");

module.exports = (server) => {
  return server.route({
    method: "post",
    path: "/start",
    handler: async function(req, h) {
      var config, err, hasConfig, installed;
      try {
        console.log("启动中");
        //确保config文件已经生成
        config = (await fs.readFile(pathLib.resolve("../config/config_example.js")));
        hasConfig = (await (async function() {
          try {
            return (await fs.stat(pathLib.resolve("../config/config.js")));
          } catch (error) {
            err = error;
            return false;
          }
        })());
        if (!hasConfig) {
          await fs.writeFile(pathLib.resolve("../config/config.js"), config.toString());
          console.log("已拷贝config_example.js生成启动配置文件");
        }
        
        //导入安装配置
        installed = (await fs.readFile(pathLib.resolve("./installed.json")));
        installed = JSON.parse(installed.toString());
        if (installData.miao) {
          installData.miao.kill();
        }
        installData.miao = new installData.Process(childProcess.spawn("node", [installed.startCmd.toString().replace("node ", "")], {
          shell: true,
          cwd: "../"
        }));
        //延迟一下
        await new Promise(function(res) {
          return setTimeout(() => {
            return res();
          }, 500);
        });
        return {
          ok: true,
          msg: "服务启动成功"
        };
      } catch (error) {
        //return h.redirect "/"
        err = error;
        console.log(err);
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  });
};
