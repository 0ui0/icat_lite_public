// Generated by CoffeeScript 2.6.1
var Alipay, alipay, fs, options, pathLib;

fs = require("fs-extra");

pathLib = require("path");

options = require("../../config/options");

Alipay = require("alipay-sdk");

alipay = null;

/*
invites 本地邀请队列
inviteCodes 远程邀请队列
*/
module.exports = {
  method: "post",
  path: "/api/pay/ali/pay",
  options: {
    auth: false //支付宝回调
  },
  handler: async function(req, h) {
    var appid, auth, db, err, m1DevPriKey, m1DevPriKeyFile, m1DevZfbPubKeyFile, m1ZfbPubKey, presentOrder, que, t, test;
    que = req.payload;
    db = req.server.db;
    auth = req.auth.credentials;
    t = (await db.mysql.transaction());
    console.log(que);
    try {
      appid = (await options.get("pay_aliAppid"));
      m1DevPriKey = (await options.get("pay_aliMode1DeveloperPrivateKeyFile"));
      m1ZfbPubKey = (await options.get("pay_aliMode1ZfbPublicKeyFile"));
      m1DevPriKeyFile = (await fs.readFile(pathLib.resolve(`./certs/${m1DevPriKey}`), "ascii"));
      m1DevZfbPubKeyFile = (await fs.readFile(pathLib.resolve(`./certs/${m1ZfbPubKey}`), "ascii"));
      if (alipay == null) {
        alipay = new Alipay.default({
          appId: appid,
          privateKey: m1DevPriKeyFile,
          alipayPublicKey: m1DevZfbPubKeyFile
        });
      }
      // 屏蔽验证签名通知
      test = alipay.checkNotifySign(que);
      if (que.trade_status === "TRADE_SUCCESS" && test) {
        presentOrder = (await db.icat_credits_calc.findOne({
          where: {
            paySystemOrderNum: que.out_trade_no
          },
          transaction: t
        }));
        presentOrder.payState = 2;
        presentOrder.freeze = 0;
        presentOrder.payState = 3;
        presentOrder.timestamp = Date.now();
        await presentOrder.save({
          transaction: t
        });
        await t.commit();
      }
      return "success";
    } catch (error) {
      err = error;
      console.log(err);
      await t.rollback();
      return {
        valid: false,
        msg: "服务器内部错误"
      };
    }
  }
};
