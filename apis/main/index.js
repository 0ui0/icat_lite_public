// Generated by CoffeeScript 2.6.1
var Op, config, debug, fs, m, marked, options, pathLib, render, version;

config = require("../../config/config");

options = require("../../config/options");

({marked} = require("marked"));

({Op} = require("sequelize"));

fs = require("fs-extra");

pathLib = require("path");

if (!global.window) {
  global.window = global.document = global.requestAnimationFrame = void 0;
}

m = require("mithril");

render = require("mithril-node-render");

version = Date.now();

debug = false;

module.exports = async function(req, h) {
  var backgroundColor, blocks, db, description, err, footCode, friendLinks, headCode, html, keywords, links, logoDark, logoFile, logoLight, posts, que, ref, ref1, ref2, ref3, script, scripts, theme, thread, title, url, urlObj;
  try {
    db = req.server.db;
    que = req.query;
    url = req.params.url;
    title = (await options.get("global_siteName"));
    description = (await options.get("global_siteDescription"));
    keywords = (await options.get("global_siteKeywords"));
    headCode = (await options.get("global_headCode"));
    footCode = (await options.get("global_footCode"));
    theme = (await options.get("global_theme"));
    friendLinks = (await options.get("global_friendLinks"));
    logoLight = (await options.get("global_styleLogoLight"));
    logoDark = (await options.get("global_styleLogoDark"));
    logoFile = (function() {
      switch (theme) {
        case 1:
          return "logo";
        case 2:
          return "logo4";
      }
    })();
    backgroundColor = (function() {
      switch (theme) {
        case 1:
          return "#FFDB66";
        case 2:
          return "#6082c0";
        default:
          return "#FFDB66";
      }
    })();
    backgroundColor = "#F6F4EF";
    backgroundColor = "#e7ecf3";
    urlObj = {
      pid: null,
      linkid: 0, //0首页 null新鲜事
      offset: null
    };
    if (req.params.pid || req.params.linkid || req.params.offset) {
      [urlObj.pid, urlObj.linkid, urlObj.offset] = [req.params.pid, req.params.linkid, req.params.offset];
      ["pid", "linkid", "offset"].forEach((str) => {
        if (urlObj[str] === "null") {
          urlObj[str] = null;
        }
        if (typeof urlObj[str] === "string" && urlObj[str].match(/^\d+$/g)) {
          return urlObj[str] = Number(urlObj[str]);
        }
      });
    }
    posts = [];
    thread = null;
    //用于显示帖子标题
    if (urlObj.pid) {
      posts = (await req.server.inject({
        url: `/api/posts/get?pid=${(ref = urlObj.pid) != null ? ref : 1}`,
        method: "get"
      }));
      posts = posts.result.data;
      if (posts) {
        posts = [posts];
      }
    } else if ((urlObj.linkid != null) && urlObj.pid !== 0) { //首页或帖子内容页
      thread = (await req.server.inject({ //获取帖子列表的标题
        url: `/api/posts/get?pid=${urlObj.linkid}`,
        method: "get"
      }));
      thread = thread.result.data;
      if (thread) {
        thread.title = thread.title.replace("{{{block}}}-", "");
      }
      posts = (await req.server.inject({
        url: `/api/posts/get?linkid=${(ref1 = urlObj.linkid) != null ? ref1 : 0}&limit=8&offset=${(ref2 = urlObj.offset) != null ? ref2 : 0}&order=desc`,
        method: "get"
      }));
      posts = posts.result.data;
    } else if (urlObj.pid === 0 && urlObj.linkid === 0) { //新鲜事
      thread = {
        title: "新鲜事"
      };
      posts = (await req.server.inject({
        url: `/api/posts/get?limit=8&offset=${(ref3 = urlObj.offset) != null ? ref3 : 0}&order=desc&contentType=markdown&isTop=0`,
        method: "get"
      }));
      posts = posts.result.data;
    }
    if (!posts) { //or not posts[0]
      /*
      console.log "异常帖子404："
      console.log posts
      console.log "请求参数："+JSON.stringify urlObj
      */
      return h.response(`<!DOCTYPE html>
<html>
  <head>
    <title>${title} - 404</title>
    <meta charset="utf-8">
    <body>┭┮﹏┭┮呜呜，找不到页面了，也许是打开方式不对？</body>
  </head>
</html>`).code(404);
    }
    blocks = (await req.server.inject({
      url: "/api/blocks/get",
      method: "get"
    }));
    blocks = blocks.result.data;
    links = [];
    scripts = [];
    html = render.sync(m("html[lang=zh]", [
      m("head",
      [
        m("title",
        `${thread ? `${thread.title} - ` : ""}${urlObj.pid && posts[0] ? `${posts[0].title} - ` : ""} ${title}`),
        m("meta[charset=utf-8]"),
        m("meta",
        {
          name: "viewport",
          content: "width=device-width, initial-scale=1.0, user-scalable=no"
        }),
        m("meta",
        {
          name: "apple-mobile-web-app-capable",
          content: "yes"
        }),
        m("meta",
        {
          name: "apple-mobile-web-status-bar-style",
          content: "black-translucent"
        }),
        m("meta",
        {
          name: "description",
          content: urlObj.pid && posts[0] ? posts[0].content : description
        }),
        m("meta",
        {
          name: "keywords",
          content: keywords
        }),
        m("meta",
        {
          name: "theme-color",
          content: backgroundColor
        }),
        (function() {
          var i,
        len,
        results;
// link
          results = [];
          for (i = 0, len = links.length; i < len; i++) {
            url = links[i];
            results.push((function(url) {
              return m("link",
        {
                rel: "stylesheet",
                href: url
              });
            })(url));
          }
          return results;
        })(),
        (function() {
          var i,
        len,
        results;
// scripts
          results = [];
          for (i = 0, len = scripts.length; i < len; i++) {
            script = scripts[i];
            results.push((function(script) {
              return m("script",
        script);
            })(script));
          }
          return results;
        })(),
        //google字体
        /*
        m "link",
          rel:"preconnect"
          href:"https://fonts.googleapis.com"
        m "link",
          rel:"preconnect"
          href:"https://fonts.gstatic.com"
          crossorigin:true
        m "link",
          rel:"stylesheet"
          href:"https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@500&display=swap"
        */
        //图标
        m("link",
        {
          rel: "shortcut icon",
          href: "/favicon.ico"
        }),
        m("link",
        {
          rel: "icon",
          href: logoLight ? logoLight : "/statics/logo.png"
        }),
        m("link",
        {
          rel: "apple-touch-icon-precomposed",
          href: logoLight ? logoLight : "/statics/logo.png"
        }),
        // google adsense
        /*
        m "script",
          "data-ad-client":"ca-pub-5258265027326011"
          src:"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"
          async:true
        */
        // social share
        m("script",
        {
          src: "https://cdn.staticfile.org/social-share.js/1.0.16/js/social-share.min.js",
          defer: true
        }),
        // baidu union
        /*
        m "meta",
          name:"baidu_union_verify"
          content:"896b053f489b7d7a11a3723a51ef5fb5"
        */

        // baidu push
        /*
        m "script",
          src:"https://zz.bdstatic.com/linksubmit/push.js"
          ["data-src2"]:"http://push.zhanzhang.baidu.com/push.js"
        */
        //360 search
        /*
        m "meta",
          name:"360-site-verification"
          content:"f6bce4910fb1d56ab9686a5d9e50369a"
        */
        /*
        #360 push 
        m "script",
          src:"https://s.ssl.qhres2.com/ssl/ab77b6ea7f3fbf79.js"
          id:"sozz"
         */
        m("style",
        `html{ 
  font-size:10px;
  height:100%;
  position:relative;
  overflow:hidden;
}
*{ 
  font-size: 1.4rem;
  font-family: 'Noto Sans SC', PingFangSC, PingFangSC-Regular, 'Microsoft YaHei', 微软雅黑, STXihei, 华文细黑, Georgia, 'Times New Roman', arial;
  font-family:system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  -webkit-tap-highlight-color: transparent;
}
body{ 
  margin: 0;
  padding: 0;
  height: 100%;
  width:100%;
  position: relative;
  overflow: hidden;
}
#home{
  height: 100%;
  width:100%;
  position: relative;
  overflow: auto;
}

a{text-decoration: none;color:hsl(205,100%,50%)}
a:hover{color:hsl(200,100%,50%);cursor: pointer;}
ul li{list-style-type:none;}
@media only screen and (max-width : 768px) {
  html{ font-size:10px }
}

@keyframes leftOrRight{
  0% { transform: scale(1);}
  50%{ transform:scale(1.2)}
  100% {transform: scale(1)}
}

@keyframes loading{
  0%{width:2%}
  100%{width:100%}
}`),
        m.trust(headCode)
      ]),
      m("body",
      [
        // 脚本入口点
        m("#home",
        {
          style: {
            height: "100% !important"
          }
        },
        [
          // 提供给爬虫数据
          m("",
          {
            style: {
              opacity: debug ? "100%" : "0%"
            }
          },
          [
            m("",
            options.get("global_siteName")),
            m("nav",
            [
              m("img",
              {
                alt: "logo",
                src: logoLight ? logoLight : "/statics/logo.png"
              }),
              m("ul",
              {
                style: {
                  display: "flex"
                }
              },
              [
                m("li",
                [m("a[href=/lite][title=首页]",
                "首页")]),
                m("li",
                [m("a[href=/0-0-null.html][title=新鲜事]",
                "新鲜事")]),
                blocks != null ? blocks.map((block) => {
                  return m("li",
                [
                    m(`a[href=/null-${block.pid}-null.html]`,
                    {
                      title: block.title.replaceAll("{{{block}}}-",
                    "")
                    },
                    block.title.replaceAll("{{{block}}}-",
                    ""))
                  ]);
                }) : void 0
              ])
            ]),
            posts != null ? posts.map((post) => {
              var ref4;
              return m("section",
            {
                style: {
                  border: "0.1rem solid #aaa",
                  borderRadius: "3rem"
                }
              },
            [
                m("",
                post.author),
                m("p",
                [m(`a[href=/${post.pid}-null-null.html][title=${post.title}]`,
                post.title)]),
                m("figure",
                [
                  (ref4 = post.icat_files) != null ? ref4.filter((file) => {
                    return file.type.match(/image/g);
                  }).map((file) => {
                    return m(`img[src=/${file.path}][href=/${file.path}][target=_blank]`,
                  {
                      style: {
                        width: "9rem",
                        height: "7rem",
                        margin: "0.5rem",
                        objectFit: "cover",
                        borderRadius: "1rem",
                        key: file.fileid,
                        cursor: "pointer"
                      }
                    });
                  }) : void 0
                ]),
                m("article",
                [m.trust(marked(post.content))]),
                m(`a[href=/null-${post.pid}-null.html][title=查看回复]`,
                "查看回复")
              ]);
            }) : void 0,
            m("section",
            [
              posts.length > 0 ? m("",
              {
                style: {
                  margin: "1rem 0"
                }
              },
              [
                m("a",
                {
                  title: "上一页",
                  href: `/${urlObj.pid}-${urlObj.linkid}-${urlObj.offset ? urlObj.offset - 8 : 8}.html`
                },
                "上一页"),
                m("br"),
                m("a",
                {
                  title: "下一页",
                  href: `/${urlObj.pid}-${urlObj.linkid}-${urlObj.offset ? urlObj.offset + 8 : 8}.html`
                },
                "下一页")
              ]) : void 0
            ])
          ]),
          //载入中动画
          m(".loadAnimate",
          {
            style: {
              textAlign: "center",
              position: "fixed",
              zIndex: "-1",
              top: "0",
              bottom: "0",
              left: "0",
              right: "0",
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              background: backgroundColor
            }
          },
          [
            m("",
            {
              style: {
                fontSize: "3rem",
                fontWeight: "bold",
                position: "relative",
                animation: "leftOrRight 3s infinite linear",
                //width:"8rem"
                //height:"8rem"
                transformOrigin: "center center",
                //background:"url(#{if logoLight then logoLight else "/statics/#{logoFile}.png"})"
                backgroundSize: "cover",
                color: "#888",
                fontWeight: 350
              }
            },
            "加载中"),
            m("",
            {
              style: {
                display: "none",
                width: "20vw",
                height: "2rem",
                background: "#3F3200",
                marginTop: "5rem",
                borderRadius: "10px",
                overflow: "hidden"
              }
            },
            [
              m(".loading",
              {
                style: {
                  width: "2%",
                  height: "100%",
                  background: "#645A56",
                  animation: "loading 5s linear"
                }
              })
            ]),
            m("",
            {
              style: {
                height: "2rem"
              }
            }),
            m(".loadProgress",
            {
              style: {
                fontSize: "1.8rem",
                fontWeight: "350",
                color: "#555"
              }
            },
            "0%"),
            m(".tips",
            {
              style: {
                fontSize: "1.8rem",
                display: "none",
                color: "#555",
                width: "30rem"
              }
            },
            [
              m("",
              {
                style: {
                  fontSize: "1.8rem",
                  margin: "1rem"
                }
              },
              "...请稍后..."),
              m("",
              "文件比较大，加载时间略长，如果您发现很不幸彻底卡在这儿了，尝试刷新下页面。如果还是不行，灰常遗憾，您可能需要更换或升级浏览器了"),
              m("",
              [
                m("span",
                "推荐使用最新版"),
                m("a[href=https://www.google.cn/intl/zh-CN/chrome][target=_blank]",
                {
                  style: {
                    color: "#888"
                  }
                },
                "Chrome"),
                m("span",
                "浏览器o(╯□╰)o")
              ])
            ]),
            m("script",
            `tips = document.getElementsByClassName("tips")[0]
setTimeout(function(){
  tips.style.display = "block"
},20000)`)
          ]),
          //总脚本
          !debug ? m("script.main_script",
          {
            src: `assets/main.js?v=${version}`,
            type: "module"
          }) : void 0,
          //搜索引擎入口跳转
          !debug ? m("script", //暂时取消lite
          `setTimeout(function(){
  // 如果是具体帖子页面
  if(${Boolean(urlObj.pid) === true}){
    location.href = "#!/home/${urlObj.pid}" 
  }
  // 如果是回复列表页
  else if(${Boolean(urlObj.linkid) === true}){
    location.href = "#!/home/${urlObj.linkid}"
  }
},1000)`) : void 0,
          /*
          unless debug
            #修正title
            m "script","""
              setTimeout(function(){
                document.title = "#{title}"
              },500)
            """
           */
          //友情链接
          m("section",
          {
            style: {
              display: "flex",
              flexWrap: "wrap",
              opacity: debug ? "100%" : "0%"
            }
          },
          [
            m("span",
            {
              style: {
                margin: "1rem"
              }
            },
            "友情链接："),
            friendLinks != null ? friendLinks.map((links) => {
              return m(`a[href=${links.url}][target=_blank][title=${links.name}]`,
            m("",
            {
                style: {
                  margin: "1rem",
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center"
                }
              },
            [
                links.img ? m("img",
                {
                  style: {
                    width: "6rem",
                    height: "3rem",
                    margin: "1rem"
                  },
                  src: links.img
                }) : void 0,
                m("span",
                links.name)
              ]));
            }) : void 0
          ]),
          m.trust(footCode)
        ])
      ])
    ]));
    html = "<!DOCTYPE html>\n" + html;
    /*
    fs = require "fs-extra"
    pathLib = require "path"
    console.log pathLib.resolve("./home.html")
    await fs.writeFile pathLib.resolve("./home.html"),html
    */
    //fs.writeFile pathLib.resolve("./page.html"),html
    return h.response(html);
  } catch (error) {
    err = error;
    console.log(err);
    return h.response(`<!DOCTYPE html>
<html>
  <head>
    <title>${title} - 发生了奇怪的状况</title>
    <meta charset="utf-8">
    <body>┭┮﹏┭┮呜呜，服务器好像不理咱了，要不一会儿再调戏它？</body>
  </head>
</html>`).code(500);
  }
};
