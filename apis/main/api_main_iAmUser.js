// Generated by CoffeeScript 2.6.1
var Op, codeList, fnTouchStart, m, options, render, urlLib, uuid;

options = require("../../config/options");

({Op} = require("sequelize"));

uuid = require("uuid");

urlLib = require("url");

if (!global.window) {
  global.window = global.document = global.requestAnimationFrame = void 0;
}

m = require("mithril");

render = require("mithril-node-render");

codeList = {};

fnTouchStart = function() {
  var conPos, container, e1, inCon, logo, logoPos, logoPosDefault, posArr;
  logo = document.querySelector("#logo");
  container = document.querySelector("#container");
  e1 = event;
  logoPosDefault = logo.getBoundingClientRect();
  conPos = container.getBoundingClientRect();
  logoPos = {};
  posArr = [];
  inCon = false;
  logo.style.transition = "";
  return document.ontouchmove = document.onmousemove = function(e2) {
    var mouse, ref;
    mouse = ((ref = e2.targetTouches) != null ? ref[0] : void 0) || e2;
    logoPos.x = -logoPosDefault.x + mouse.clientX - 50;
    logoPos.y = -logoPosDefault.y + mouse.clientY - 50;
    logoPos.X = mouse.clientX;
    logoPos.Y = mouse.clientY;
    logo.style.transform = `translate(${logoPos.x}px,${logoPos.y}px)`;
    posArr.push({
      x: logoPos.X,
      y: logoPos.Y
    });
    if (Math.abs(logoPos.X - conPos.x - 50) ** 2 + Math.abs(logoPos.Y - conPos.y - 50) ** 2 <= 100 ** 2) {
      container.style.border = "0.5rem solid #555";
      inCon = true;
    } else {
      container.style.border = "0.5rem dashed #888";
      inCon = false;
    }
    return document.ontouchend = document.onmouseup = function() {
      if (inCon) {
        location.href = `/iAmUser?code=${window.verifyCode}&path=${que.path}`;
      } else {
        logoPos.x = 0;
        logoPos.y = 0;
        logo.style.transition = "all 0.5s ease";
        logo.style.transform = `translate(${logoPos.x}px,${logoPos.y}px)`;
      }
      document.ontouchmove = document.onmousemove = null;
      return document.ontouchend = document.onmouseup = null;
    };
  };
};

module.exports = {
  path: "/iAmUser", //pid linkid limit offset count
  method: "get",
  options: {
    auth: false
  },
  /*
  cors:
    origin:[
      "http://localhost"
      "http://localhost:8080"
      "http://[::1]"
      "http://[::1]:8080"
      "http://192.168.2.78"
      "http://192.168.2.78:8080"
    ]
  */
  handler: async function(req, h) {
    var db, err, global_theme, gotoPath, html, ip, mainColor, que, userIp, verifyCode, xFF, xRI;
    que = req.query;
    db = req.server.db;
    console.log("防火墙转发" + decodeURIComponent(que.path));
    if (que.path && decodeURIComponent(que.path).match(/^\/(api|sign|logout|dzLogin)/g)) {
      return h.response({
        ok: false,
        data: [],
        msg: "请在弹出中拖拽验证一下，证明你不是机器人哈",
        checkIsUser: true
      });
    }
    try {
      //.header "aaa",15
      global_theme = (await options.get("global_theme"));
      mainColor = global_theme === 2 ? "#5683C5" : "#ffdb66";
      verifyCode = uuid.v4();
      codeList[verifyCode] = {
        timer: setTimeout(function() {
          return codeList[verifyCode] = null;
        }, 1 * 60 * 1000)
      };
      //获取用户ip
      xFF = req.headers["x-forward-for"];
      xRI = req.headers["x-real-ip"];
      userIp = xFF ? typeof xFF === "array" ? xFF[0] : xFF : xRI ? xRI : req.info.remoteAddress;
      if (que.code && codeList[que.code]) {
        ip = (await db.icat_cache_ips.create({
          ip: userIp,
          timestamp: Date.now(),
          headers: req.headers
        }));
        gotoPath = que.path && que.path !== "undefined" ? que.path : "/";
        return h.redirect(gotoPath); //跳转回首页
      }
      html = render.sync(m("html[lang=zh]", {
        style: {
          height: "100%",
          width: "100%",
          fontSize: "10px",
          padding: 0,
          margin: 0,
          position: "relative",
          overflow: "hidden"
        }
      }, [
        m("head",
        [
          m("title",
          "拖拽~验证"),
          m("meta",
          {
            name: "viewport",
            content: "width=device-width, initial-scale=1.0, user-scalable=no"
          }),
          m("meta[charset=utf-8]"),
          m("script",
          `window.onload = function(){
  window.verifyCode = \"${verifyCode}\";
  window.que = {
    path:"${que.path}"
  }
}`)
        ]),
        m("body",
        {
          style: {
            padding: 0,
            margin: 0,
            backgroundColor: mainColor,
            height: "100%",
            width: "100%",
            position: "absolute",
            left: 0,
            top: 0,
            overflow: "auto"
          }
        },
        [
          m("",
          {
            style: {
              height: "100%",
              width: "100%",
              display: "flex",
              flexDirection: "column",
              alignItems: "center"
            }
          },
          [
            m("",
            {
              style: {
                height: "15vh"
              }
            }),
            m("#container",
            {
              style: {
                width: "12rem",
                height: "12rem",
                background: "#eee",
                borderRadius: "3rem",
                border: "0.5rem dashed #888"
              }
            }),
            m("",
            {
              style: {
                marginTop: "5rem",
                color: "#555",
                fontSize: "2.5rem",
                fontWeight: "bold",
                userSelect: "none"
              }
            },
            "将图案拖入框框内"),
            m("",
            {
              style: {
                margin: "1rem",
                height: "15rem",
                border: "0.2rem solid #888",
                borderRadius: "1rem"
              }
            }),
            m("#logo",
            {
              style: {
                width: "10rem",
                height: "10rem",
                backgroundImage: "url(./statics/logo2.png)",
                backgroundColor: "#333",
                borderRadius: "50%",
                backgroundSize: "cover"
              },
              ontouchstart: (function() {
                return `(${String(fnTouchStart)}).bind(this)()`;
              })(),
              onmousedown: (function() {
                return `(${String(fnTouchStart)}).bind(this)()`;
              })()
            })
          ])
        ])
      ]));
      return h.response(html);
    } catch (error) {
      err = error;
      console.log(err);
      return h.response(`<!DOCTYPE html>
<html>
  <head>
    <title>${title} - 发生了奇怪的状况</title>
    <meta charset="utf-8">
    <body>┭┮﹏┭┮呜呜，服务器好像不理咱了，要不一会儿再调戏它？</body>
  </head>
</html>`).code(500);
    }
  }
};
