// Generated by CoffeeScript 2.6.1
/*
  通过credit是否大于零判断是否要加积分
  creditid1-3必须存在
*/
module.exports = {
  method: "post",
  path: "/api/tasks/set/{taskid?}",
  options: {
    validate: {
      params: Joi.object({
        taskid: Joi.string().pattern(/^\d+$/)
      }),
      payload: Joi.object({
        type: Joi.string().min(1).max(30).required(),
        action: Joi.string().required().required(),
        name: Joi.string().required().required(),
        description: Joi.string().allow("").default(""),
        linkid: Joi.number().min(0).default(0),
        target: Joi.number().min(0).default(0),
        beforeTask: Joi.number().default(0),
        creditid: Joi.number().min(1).default(1),
        credit: Joi.number().min(1).default(10),
        creditid2: Joi.number().min(1).default(1),
        credit2: Joi.number().min(0).default(0),
        creditid3: Joi.number().min(1).default(1),
        credit3: Joi.number().min(0).default(0),
        goodid: Joi.number().min(1).default(1),
        goodNum: Joi.number().min(0).default(0),
        goodid2: Joi.number().min(1).default(1),
        goodNum2: Joi.number().min(0).default(0),
        goodid3: Joi.number().min(1).default(1),
        goodNum3: Joi.number().min(0).default(0),
        level: Joi.number().min(1).max(10).default(1),
        startTimestamp: Joi.number().default(Date.now()),
        endTimestamp: Joi.number().min(Date.now()).default(10 ** 14),
        cycleTimestamp: Joi.number().min(1000 * 60).default(10 ** 14),
        extra: Joi.object().default({}),
        freeze: Joi.number().default(1),
        useRandom: Joi.number().default(1),
        order: Joi.number().min(0).default(0)
      }).unknown(true)
    }
  },
  handler: async function(req, h) {
    var auth, credit, db, err, que, taskid, tmp;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      taskid = Number(req.params.taskid);
      if (auth.icat_users_extend.power < 90) {
        return {
          ok: false,
          msg: "权限不足"
        };
      }
      credit = (await db.icat_credits.findOne({
        where: {
          creditid: que.creditid
        }
      }));
      if (!credit) {
        return {
          ok: false,
          msg: "积分id不存在"
        };
      }
      if (taskid) { //有taskid说明是更新
        tmp = (await db.icat_tasks.findOne({
          where: {
            taskid: taskid
          }
        }));
        tmp.action = que.action;
        tmp.type = que.type;
        tmp.name = que.name;
        tmp.description = que.description;
        tmp.linkid = que.linkid;
        tmp.target = que.target;
        tmp.beforeTask = que.beforeTask;
        tmp.creditid = que.creditid;
        tmp.credit = que.credit;
        tmp.creditid2 = que.creditid2;
        tmp.credit2 = que.credit2;
        tmp.creditid3 = que.creditid3;
        tmp.credit3 = que.credit3;
        tmp.goodid = que.goodid;
        tmp.goodNum = que.goodNum;
        tmp.goodid2 = que.goodid2;
        tmp.goodNum2 = que.goodNum2;
        tmp.goodid3 = que.goodid3;
        tmp.goodNum3 = que.goodNum3;
        tmp.level = que.level;
        tmp.extra = que.extra;
        tmp.startTimestamp = que.startTimestamp;
        tmp.endTimestamp = que.endTimestamp;
        tmp.cycleTimestamp = que.cycleTimestamp;
        tmp.timestamp = Date.now();
        tmp.freeze = que.freeze;
        tmp.useRandom = que.useRandom;
        tmp.order = que.order;
        await tmp.save();
        return {
          ok: true,
          msg: "任务修改成功"
        };
      } else {
        tmp = (await db.icat_tasks.create({
          type: que.type,
          action: que.action,
          name: que.name,
          description: que.description,
          linkid: que.linkid,
          target: que.target,
          beforeTask: que.beforeTask,
          creditid: que.creditid,
          credit: que.credit,
          creditid2: que.creditid2,
          credit2: que.credit2,
          creditid3: que.creditid3,
          credit3: que.credit3,
          goodid: que.goodid,
          goodNum: que.goodNum,
          goodid2: que.goodid2,
          goodNum2: que.goodNum2,
          goodid3: que.goodid3,
          goodNum3: que.goodNum3,
          level: que.level,
          extra: que.extra,
          startTimestamp: que.startTimestamp,
          endTimestamp: que.endTimestamp,
          cycleTimestamp: que.cycleTimestamp,
          freeze: que.freeze,
          useRandom: que.useRandom,
          timestamp: Date.now(),
          order: que.order
        }));
        return {
          ok: true,
          msg: "任务创建成功",
          taskid: tmp.taskid
        };
      }
    } catch (error) {
      err = error;
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
