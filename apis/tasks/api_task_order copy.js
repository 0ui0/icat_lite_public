// Generated by CoffeeScript 2.6.1
/*
  desc
  linkid
  limit
*/
module.exports = {
  method: "post",
  path: "/api/tasks/orderxx/{taskid}",
  options: {
    validate: {
      params: Joi.object({
        taskid: Joi.string().pattern(/^\d+$/)
      })
    }
  },
  handler: async function(req, h) {
    var auth, credit, db, err, que, ref, stat, t, task, taskid;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      t = (await db.mysql.transaction());
      // 注意参数类型为字符串
      taskid = Number(req.params.taskid);
      task = (await db.icat_tasks.findOne({
        where: {
          taskid: taskid
        }
      }));
      credit = (await db.icat_credits.findOne({
        where: {
          creditid: task.creditid
        }
      }));
      if (task.freeze === 1) {
        return {
          ok: false,
          msg: "该任务未开启"
        };
      }
      if (!task) {
        return {
          ok: false,
          msg: "找不到该任务惹"
        };
      }
      if (!credit) {
        return {
          ok: false,
          msg: "奖励积分已失效，请重新设置"
        };
      }
      stat = (await db.icat_stats.findOne({
        where: {
          uid: auth.uid,
          taskid: taskid
        }
      }));
      if (task.type === "bbs") {
        if (task.action === "attendance") { //每日签到
          stat = (await db.icat_stats.findOne({
            where: {
              uid: auth.uid,
              taskid: taskid
            },
            transaction: t
          }));
          if (!stat) {
            stat = (await db.icat_stats.create({
              uid: auth.uid,
              taskid: task.taskid,
              type: "bbs_attendance",
              description: "每日打卡",
              count: 0,
              target: 0,
              timestamp: Date.now()
            }, {
              transaction: t
            }));
          } else if ((0 < (ref = Date.now() - stat.timestamp) && ref <= 24 * 60 * 60 * 1000)) {
            await t.commit();
            return {
              ok: false,
              msg: "今天已经打卡过了噢"
            };
          }
          stat.timestamp = Date.now();
          await stat.increment({
            count: 1
          }, {
            transition: t
          });
          await stat.increment({
            target: 1
          }, {
            transition: t
          });
          //stat.count += 1
          await stat.save({
            transaction: t
          });
          //颁发签到奖励
          await db.icat_credits_calc.create({
            uid: auth.uid,
            user: auth.user,
            creditid: credit.creditid,
            creditName: credit.name,
            calc: task.credit,
            freeze: 0,
            action: "每日打卡",
            type: "system"
          }, {
            transition: t
          });
          //发送通知
          await db.icat_notices.create({
            sender: auth.user,
            senderId: auth.uid,
            receiver: auth.user,
            receiverId: auth.uid,
            msgType: "系统",
            msgAction: "打卡的",
            msgContent: `${task.credit}${credit.name}积分已到账`
          }, {
            transition: t
          });
          await t.commit();
          return {
            ok: true,
            msg: "打卡成功"
          };
        }
        if (task.action === "post") {
          return (await db.mysql.transaction(async(t) => {
            var createFn, ref1, ref2;
            //判断任务申请时间
            createFn = async() => {
              return (await db.icat_stats.create({
                uid: auth.uid,
                taskid: task.taskid,
                type: "bbs_post",
                description: `回复帖子${task.extra.targetPid}，${task.target}次`,
                count: 0,
                target: task.target,
                timestamp: Date.now()
              }, {
                transaction: t
              }));
            };
            if (task.startTimestamp !== 0) {
              if ((task.startTimestamp <= (ref1 = Date.now()) && ref1 <= task.endTimestamp)) {
                if (!stat) {
                  return stat = (await createFn());
                } else {
                  return {
                    ok: false,
                    msg: "该任务已经申请过啦"
                  };
                }
              } else {
                return {
                  ok: false,
                  msg: "任务已过期"
                };
              }
            } else if (task.cycleTimestamp !== 0) {
              if (!stat) {
                stat = (await createFn());
              } else if ((0 < (ref2 = stat.timestamp - Date.now()) && ref2 <= task.cycleTimestamp)) {
                return {
                  ok: false,
                  msg: "在任务周期内不能重复申请哦"
                };
              }
              stat.count = 0;
              stat.timestamp = Date.now();
              return (await stat.save({
                transition: t
              }));
            }
          }));
        }
      }
    } catch (error) {
      err = error;
      await t.rollback();
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
