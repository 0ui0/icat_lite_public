// Generated by CoffeeScript 2.6.1
/*
  desc
  linkid
  limit
*/
module.exports = {
  method: "post",
  path: "/api/tasks/commit/{taskid}",
  options: {
    validate: {
      params: Joi.object({
        taskid: Joi.string().pattern(/^\d+$/)
      })
    }
  },
  handler: async function(req, h) {
    var auth, credits, db, err, goodRelation, goods, i, j, msgContent1, msgContent2, order, probability, que, randomCredits, ref, stat, t, task, taskid;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      t = (await db.mysql.transaction());
      // 注意参数类型为字符串
      taskid = Number(req.params.taskid);
      task = (await db.icat_tasks.findOne({
        where: {
          taskid: taskid
        },
        transaction: t
      }));
      if (!task) {
        await t.commit();
        return {
          ok: false,
          msg: "任务不存在"
        };
      }
      if (task.freeze === 1) {
        await t.commit();
        return {
          ok: false,
          msg: "任务未开启"
        };
      }
      credits = [];
      goods = [];
      for (order = i = 1; i <= 3; order = ++i) {
        order = order === 1 ? "" : String(order);
        if (task[`creditid${order}`]) {
          credits[order] = (await db.icat_credits.findOne({
            where: {
              creditid: task[`creditid${order}`]
            },
            transaction: t
          }));
          goods[order] = (await db.icat_goods.findOne({
            where: {
              goodid: task[`goodid${order}`]
            },
            transaction: t
          }));
          if (!credits[order]) {
            await t.commit();
            return {
              ok: false,
              msg: "积分id已失效，请重新设置"
            };
          }
          if (!goods[order]) {
            await t.commit();
            return {
              ok: false,
              msg: "物品id已失效，请重新设置"
            };
          }
        }
      }
      stat = (await db.icat_stats.findOne({
        where: {
          uid: auth.uid,
          taskid: taskid
        },
        transaction: t
      }));
      if ((task.startTimestamp <= (ref = Date.now()) && ref < task.endTimestamp)) {
        if (stat) {
          if (stat.count < stat.target) {
            await t.commit();
            return {
              ok: false,
              msg: "任务进行中，请先完成任务"
            };
          } else {
            if (stat.count === stat.target) {
              //如果任务完成，直接领取奖励
              msgContent1 = "";
              msgContent2 = "";
              randomCredits = [];
              for (order = j = 1; j <= 3; order = ++j) {
                order = order === 1 ? "" : String(order);
                if (task[`credit${order}`] > 0) { //如果奖励积分数量大于0
                  await db.icat_credits_calc.create({
                    uid: auth.uid,
                    user: auth.user,
                    creditid: credits[order].creditid,
                    creditName: credits[order].name,
                    calc: task[`credit${order}`],
                    freeze: 0,
                    action: `${task.name}任务奖励`,
                    type: "system",
                    timestamp: Date.now()
                  }, {
                    transaction: t
                  });
                  msgContent1 += `${task[`credit${order}`]}${credits[order].name} `;
                  //随机加成
                  //if randomCredits[order] > 0 and task.useRandom is 1
                  if (task.useRandom === 1) {
                    probability = Math.random(); //随机概率
                    if (probability < 0.2) {
                      randomCredits[order] = task[`credit${order}`];
                    } else if ((0.2 <= probability && probability < 0.5)) {
                      randomCredits[order] = Math.floor(Math.random() * (task[`credit${order}`] / 2 + 1));
                    } else {
                      randomCredits[order] = Math.floor(Math.random() * (task[`credit${order}`] / 3 + 1));
                    }
                    await db.icat_credits_calc.create({
                      uid: auth.uid,
                      user: auth.user,
                      creditid: credits[order].creditid,
                      creditName: credits[order].name,
                      calc: randomCredits[order],
                      freeze: 0,
                      action: `${task.name}任务奖励 随机加成`,
                      type: "system",
                      timestamp: Date.now()
                    }, {
                      transaction: t
                    });
                    msgContent1 += `+(${randomCredits[order]})`;
                  }
                }
                if (task[`goodNum${order}`] > 0) {
                  //检查是否有该物品
                  goodRelation = (await db.icat_relations.findOne({
                    where: {
                      icatGoodGoodid: goods[order].goodid,
                      icatUsersExtendUextid: auth.uid
                    },
                    transaction: t
                  }));
                  if (goodRelation) {
                    await goodRelation.increment({
                      value: task[`goodNum${order}`]
                    }, {
                      transaction: t
                    });
                  } else {
                    await auth.icat_users_extend.addIcat_goods(goods[order], {
                      through: {
                        whoUse: "users_goods",
                        name: "个数",
                        key: "count",
                        type: "number",
                        value: task[`goodNum${order}`]
                      },
                      transaction: t
                    });
                  }
                  msgContent2 += `${goods[order].name} x${task[`goodNum${order}`]} `;
                }
              }
              await db.icat_notices.create({
                sender: auth.user,
                senderId: auth.uid,
                receiver: auth.user,
                receiverId: auth.uid,
                msgType: "系统",
                msgAction: "完成任务的",
                msgContent: `${msgContent1}积分 ${msgContent2}已到账；【${task.name}】`
              }, {
                transaction: t
              });
              await stat.increment({
                count: 1
              }, {
                transaction: t
              });
              await t.commit();
              return {
                ok: true,
                msg: "任务奖励已发放，请前往通知查看"
              };
            } else {
              await t.commit();
              return {
                ok: false,
                msg: "已经领过奖励啦"
              };
            }
          }
        } else {
          await t.commit();
          return {
            ok: false,
            msg: "任务尚未申请"
          };
        }
      } else {
        await t.commit();
        return {
          ok: false,
          msg: "任务已过期"
        };
      }
    } catch (error) {
      err = error;
      await t.rollback();
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
