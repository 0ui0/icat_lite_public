// Generated by CoffeeScript 2.6.1
/*
  desc
  linkid
  limit
*/
module.exports = {
  method: "post",
  path: "/api/tasks/order/{taskid}",
  options: {
    validate: {
      params: Joi.object({
        taskid: Joi.string().pattern(/^\d+$/)
      })
    }
  },
  handler: async function(req, h) {
    var auth, beforeTask, beforeTaskStat, credit, db, err, que, ref, stat, t, task, taskid, today;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      t = (await db.mysql.transaction());
      // 注意参数类型为字符串
      taskid = Number(req.params.taskid);
      task = (await db.icat_tasks.findOne({
        where: {
          taskid: taskid
        },
        transaction: t
      }));
      credit = (await db.icat_credits.findOne({
        where: {
          creditid: task.creditid
        },
        transaction: t
      }));
      if (task.freeze === 1) {
        await t.commit();
        return {
          ok: false,
          msg: "该任务未开启"
        };
      }
      if (!task) {
        await t.commit();
        return {
          ok: false,
          msg: "任务不存在"
        };
      }
      if (!credit) {
        await t.commit();
        return {
          ok: false,
          msg: "奖励积分id已失效，请重新设置"
        };
      }
      //前置任务检测
      if (task.beforeTask) {
        beforeTaskStat = (await db.icat_stats.findOne({
          where: {
            uid: auth.uid,
            taskid: task.beforeTask
          },
          transaction: t
        }));
        beforeTask = (await db.icat_tasks.findOne({
          where: {
            taskid: task.beforeTask
          },
          transaction: t
        }));
        if (!beforeTaskStat) { //如果没有前置任务记录
          await t.commit();
          return {
            ok: false,
            msg: `必须完成前置委托：${beforeTask.name}`
          };
        }
        if (Date.now() - beforeTaskStat.timestamp >= beforeTask.cycleTimestamp) {
          //如果任务完成时间超出任务周期，说明当前周期任务未完成
          await t.commit();
          return {
            ok: false,
            msg: `必须完成前置委托：${beforeTask.name}`
          };
        } else if (beforeTaskStat.count < beforeTaskStat.target) {
          //如果在周期内，检查是任务否未完成
          await t.commit();
          return {
            ok: false,
            msg: `必须完成前置委托：${beforeTask.name}`
          };
        }
      }
      stat = (await db.icat_stats.findOne({
        where: {
          uid: auth.uid,
          taskid: taskid
        },
        transaction: t
      }));
      if ((task.startTimestamp <= (ref = Date.now()) && ref < task.endTimestamp)) {
        if (stat) {
          if (stat.count < stat.target) {
            await t.commit();
            return {
              ok: false,
              msg: "任务进行中，请先完成任务"
            };
          } else {
            if (stat.count === stat.target) {
              await t.commit();
              return {
                ok: false,
                msg: "请先提交任务"
              };
            } else {
              if (Date.now() - stat.timestamp <= task.cycleTimestamp) { //如果时间没有超过一个周期
                await t.commit();
                return {
                  ok: false,
                  msg: "当前周期任务已完成，请在下个周期申请任务"
                };
              } else {
                stat.count = stat.target;
                await stat.save({
                  transition: t
                });
                await stat.increment({
                  target: task.target
                }, {
                  transaction: t
                });
                stat.timestamp = task.action === "attendance" ? (today = new Date(), new Date(`${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`).getTime()) : Date.now();
                await stat.save({
                  transaction: t
                });
                //如果是打卡签到
                if (stat.type === "bbs_attendance") {
                  await stat.increment({
                    count: 1
                  }, {
                    transaction: t
                  });
                }
                await t.commit();
                return {
                  ok: true,
                  msg: "任务申请成功"
                };
              }
            }
          }
        } else {
          stat = (await db.icat_stats.create({
            uid: auth.uid,
            taskid: task.taskid,
            type: `${task.type}_${task.action}`,
            description: `任务统计：${task.name}`,
            count: 0,
            target: task.target,
            timestamp: task.action === "attendance" ? (today = new Date(), new Date(`${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`).getTime()) : Date.now()
          }, {
            transaction: t
          }));
          //如果是打卡签到
          if (stat.type === "bbs_attendance") {
            await stat.increment({
              count: 1
            }, {
              transaction: t
            });
          }
          await t.commit();
          return {
            ok: true,
            msg: "任务申请成功"
          };
        }
      } else {
        await t.commit();
        return {
          ok: false,
          msg: "任务已过期"
        };
      }
    } catch (error) {
      err = error;
      await t.rollback();
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
