// Generated by CoffeeScript 2.6.1
var fs, pathLib;

pathLib = require("path");

fs = require("fs-extra");

/*
  fileid
  que.pid
*/
module.exports = {
  method: "post",
  path: "/api/files/del/{fileid}",
  options: {
    validate: {
      params: Joi.object({
        fileid: Joi.string().pattern(/^\d+$/)
      })
    }
  },
  handler: async function(req, h) {
    var auth, db, err, file, fileWhetherOrNotHasThread, fileid, par, que, t, userImgDir;
    que = req.payload;
    db = req.server.db;
    auth = req.auth.credentials;
    par = req.params;
    userImgDir = pathLib.resolve("www/data/" + auth.userDir + "/files");
    fileid = Number(par.fileid);
    if (fileid === -1 || (fileid == null)) {
      return {
        ok: false,
        msg: "fileid异常"
      };
    }
    try {
      t = (await db.mysql.transaction());
      file = (await db.icat_files.findOne({
        where: {
          fileid: fileid
        }
      }, {
        transaction: t
      }));
      //如果该文件和帖子已经没有任何关联了，再删除实体文件
      fileWhetherOrNotHasThread = (await db.icat_relations.findOne({
        where: {
          icatFileFileid: fileid
        }
      }, {
        transaction: t
      }));
      if (fileWhetherOrNotHasThread === null) {
        if (file.path.match(/statics/)) {
          await fs.remove(pathLib.resolve(`www/public/${file.path}`));
          await fs.remove(pathLib.resolve(`www/public/${file.pathZip}`));
        } else {
          await fs.remove(pathLib.resolve(`www/${file.path}`));
          await fs.remove(pathLib.resolve(`www/${file.pathZip}`));
        }
        await file.destroy({ //删除文件表格
          transaction: t
        });
        await t.commit();
        return {
          ok: true,
          msg: "文件已删除"
        };
      } else {
        await t.rollback();
        return {
          ok: false,
          msg: "该文件被帖子引用，请先解除引用"
        };
      }
    } catch (error) {
      err = error;
      console.log(err);
      await t.rollback();
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
