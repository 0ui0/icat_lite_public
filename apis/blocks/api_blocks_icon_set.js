// Generated by CoffeeScript 2.6.1
var Jimp, fileType, fs, pathLib, stream, uuid;

pathLib = require("path");

fs = require("fs-extra");

fileType = require("file-type");

uuid = require("uuid").v4;

Jimp = require("jimp");

stream = require("stream");

module.exports = {
  path: "/api/blocks/icon/set",
  method: "post",
  options: {
    payload: {
      //uploads:pathLib.resolve "./www/statics/block"
      output: "stream",
      parse: true,
      allow: ['multipart/form-data'],
      multipart: true,
      maxBytes: 1 * 1024 * 1024
    }
  },
  handler: async function(req, h) {
    var auth, bufferStream1, bufferStream2, clientPath, db, err, fileName, imageBuffer, jimp, newHeight, newJimp, newReadStream1, newReadStream2, newWidth, que, rate, serverPath, serverPath2, type, writeFile;
    que = req.payload;
    db = req.server.db;
    auth = req.auth.credentials;
    writeFile = (path, file) => {
      return new Promise((res, rej) => {
        var writeStream;
        writeStream = new fs.createWriteStream(path);
        file.pipe(writeStream);
        writeStream.on("close", () => {
          return res();
        });
        return writeStream.on("error", (error) => {
          console.log(error);
          return rej(error);
        });
      });
    };
    try {
      type = (await fileType.fromBuffer(que.file._data));
      fileName = uuid().replace(/-/g, "");
      serverPath = pathLib.resolve(`./www/public/statics/block/${fileName}.${type.ext}`);
      serverPath2 = pathLib.resolve(`./www/dist/statics/block/${fileName}.${type.ext}`);
      clientPath = `./statics/block/${fileName}.${type.ext}`;
      if (auth.icat_users_extend.power < 90) {
        return {
          ok: false,
          msg: "权限不足"
        };
      }
      if (type === void 0) {
        return {
          ok: false,
          msg: "未知文件类型"
        };
      }
      if (!type.mime.match(/image/g)) {
        return {
          ok: false,
          msg: "非图片类型文件"
        };
      }
      //压缩文件
      if (!["image/jpeg", "image/png", "image/bmp", "image/tiff", "image/gif"].find((preType) => {
        return preType === type.mime;
      })) {
        return {
          ok: false,
          msg: "当前格式不支持图片压缩"
        };
      }
      jimp = (await Jimp.read(que.file._data));
      newJimp = jimp.clone();
      //缩放
      if (newJimp.bitmap.width > 300) {
        newWidth = 300;
        rate = newJimp.bitmap.width / newWidth;
        newHeight = newJimp.bitmap.height / rate;
        newJimp.resize(newWidth, newHeight);
      }
      //质量
      newJimp.quality(50);
      imageBuffer = (await newJimp.getBufferAsync(type.mime));
      bufferStream1 = new stream.PassThrough();
      newReadStream1 = bufferStream1.end(imageBuffer);
      bufferStream2 = new stream.PassThrough();
      newReadStream2 = bufferStream2.end(imageBuffer);
      await writeFile(serverPath, newReadStream1);
      await writeFile(serverPath2, newReadStream2);
      return {
        ok: true,
        msg: "上传成功",
        icon: clientPath
      };
    } catch (error1) {
      err = error1;
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
