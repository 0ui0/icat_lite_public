// Generated by CoffeeScript 2.6.1
var config, ipList, md5, mkUsrDir, options, passwordCheck, pwdTryTimes, timer, tmpUsers, userTools;

config = require("../../config/config");

options = require("../../config/options");

passwordCheck = require("../../tools/password/password_check");

mkUsrDir = require("../tools/tool_mkUsrDir");

userTools = require("../../tools/user/user_main");

md5 = config.md5;

tmpUsers = {};

timer = {};

ipList = {};

pwdTryTimes = {};

module.exports = {
  method: "post",
  path: "/sign",
  options: {
    auth: false
  },
  handler: async function(req, h) {
    var ctime, db, err, globalDoor, ip, joinAgreement, joinAvoidUserName, joinPasswordRetryCooldown, joinPasswordTryTime, joinPause, joinPauseMessage, joinReview, joinUserNameLength, preventName, pwdCheckStatus, que, ref, ref1, ref2, ref3, sameIpLimit, setSession, t, time, user, userExt;
    try {
      db = req.server.db;
      que = req.payload;
      ip = (ref = (ref1 = (ref2 = (ref3 = req.headers["X-Real-IP"]) != null ? ref3 : req.headers["x-real-ip"]) != null ? ref2 : req.headers["X-Forwarded-For"]) != null ? ref1 : req.headers["x-forwarded-for"]) != null ? ref : req.info.remoteAddress;
      console.log("ip：" + ip);
      if (!ip) {
        return {
          ok: false,
          valid: false,
          msg: "客户端ip地址异常，请重试"
        };
      }
      joinPasswordTryTime = (await options.get("join_passwordTryTime"));
      joinPasswordRetryCooldown = (await options.get("join_passwordRetryCooldown"));
      if (pwdTryTimes[ip] && pwdTryTimes[ip] >= joinPasswordTryTime) {
        return {
          ok: true,
          valid: false,
          msg: `尝试次数过多，请从首次出现本提示的${joinPasswordRetryCooldown}分钟后再试`
        };
      }
      //如果站点关闭
      globalDoor = (await options.get("global_door"));
      user = (await db.icat_users.findOne({
        include: [
          {
            model: db.icat_users_extend,
            attributes: {
              exclude: ["dzUid",
          "salt",
          "createdAt",
          "updatedAt"]
            }
          }
        ],
        where: {
          user: que.user,
          password: md5((md5(que.password)) + config.key)
        }
      }));
      if (user) {
        if (globalDoor === 2) {
          if (user.icat_users_extend.power < 90) {
            return {
              valid: false,
              ok: false,
              msg: "站点关闭，暂停登录噢 code:2"
            };
          }
        }
        if (globalDoor === 3) {
          if (user.icat_users_extend.power !== 100) {
            return {
              valid: false,
              ok: false,
              msg: "站点关闭，暂停登录噢 code:3"
            };
          }
        }
        // 登录成功，写入cookie
        setSession = async function() {
          return (await req.cookieAuth.set({
            uid: user.uid,
            user: user.user
          }));
        };
        await setSession();
        //更新最后登录时间
        /*
        loginUser = await db.icat_users_extend.findOne
          where:
            uid: user.uid
        loginUser.loginTimestamp = Date.now()

        await loginUser.save()
        */
        user.icat_users_extend.loginTimestamp = Date.now();
        if (!user.icat_users_extend.homeDir) { //为没有家目录的用户配置家目录
          user.icat_users_extend.homeDir = userTools.getUserDirectory(user.uid);
        }
        user.icat_users_extend.lastLoginIp = ip;
        await user.icat_users_extend.save();
        return {
          valid: true,
          ok: true,
          msg: "登录成功",
          data: user.icat_users_extend
        };
      } else {
        //如果暂停注册
        joinPause = (await options.get("join_pause"));
        joinPauseMessage = (await options.get("join_pauseMessage"));
        if (joinPause === 1) {
          return {
            valid: false,
            ok: false,
            msg: joinPauseMessage
          };
        }
        //如果站点关闭
        if (globalDoor === 2 || globalDoor === 3) {
          return {
            valid: false,
            ok: false,
            msg: "站点关闭，暂停注册噢"
          };
        }
        // 如果临时数组有用户，且密码正确 则写入用户到数据库
        if (tmpUsers[que.user] && tmpUsers[que.user] === que.password) {
          try {
            t = (await db.mysql.transaction());
            user = (await db.icat_users.create({
              user: que.user,
              password: que.password
            }, {
              transaction: t
            }));
            joinReview = (await options.get("join_review"));
            userExt = (await db.icat_users_extend.create({
              uid: user.uid,
              user: user.user,
              group: "user",
              power: joinReview === 1 ? -1 : 10,
              createdTime: ctime = Date.now(),
              signTimestamp: ctime,
              loginTimestamp: ctime,
              ip: ip
            }, {
              transaction: t
            }));
            
            // 创建用户专属目录
            await mkUsrDir(user.uid);
            
            // 写入家目录路径
            userExt.homeDir = userTools.getUserDirectory(user.uid);
            await userExt.save({
              transaction: t
            });
            await req.cookieAuth.set({
              uid: user.uid,
              user: user.user
            });
            delete tmpUsers[que.user];
            await t.commit();
            ipList[ip] = true;
            sameIpLimit = (await options.get("join_sameIPLimit"));
            setTimeout(function() {
              return ipList[ip] = false;
            }, sameIpLimit * 3600 * 1000);
            return {
              valid: false,
              ok: true,
              msg: `账号已激活${joinReview === 1 ? "，请等待审核" : ""}`,
              data: userExt
            };
          } catch (error) {
            err = error;
            await t.rollback();
            return console.log(err); // 如果没有，尝试创建临时用户 
          }
        } else {
          
          //检测ip是否已经注册过，如果ip列表里有，说明已经注册
          sameIpLimit = (await options.get("join_sameIPLimit"));
          if (ipList[ip]) {
            return {
              valid: false,
              ok: true,
              msg: `未达到重复注册限定时间：${sameIpLimit}小时`
            };
          }
          if (((await db.icat_users.count({
            where: {
              user: que.user
            }
          }))) > 0 || tmpUsers[que.user]) {
            //登录尝试限制
            if (pwdTryTimes[ip] == null) {
              pwdTryTimes[ip] = 0;
            }
            pwdTryTimes[ip]++;
            if (pwdTryTimes[ip] === joinPasswordTryTime) {
              setTimeout(function() {
                return pwdTryTimes[ip] = 0;
              }, joinPasswordRetryCooldown * 60 * 1000);
            }
            return {
              valid: false,
              ok: true,
              msg: "用户名已存在或即将被销毁或密码不正确"
            };
          } else {
            // 校验用户名和密码
            joinAvoidUserName = (await options.get("join_avoidUserName"));
            joinUserNameLength = (await options.get("join_userNameLength"));
            preventName = joinAvoidUserName.find((user) => {
              return user.match(new RegExp(`${que.user}`, "g"));
            });
            if (preventName) {
              return {
                valid: false,
                ok: true,
                msg: "用户名包含禁止注册字符"
              };
            }
            if (!(que.user || que.password)) {
              return {
                valid: false,
                ok: true,
                msg: "用户名或密码为空"
              };
            } else if (!new RegExp(`^\\w{${joinUserNameLength[0]},${joinUserNameLength[1]}}$`).test(que.user)) {
              return {
                valid: false,
                ok: true,
                msg: `用户名不合法（允许长度：${joinUserNameLength[0]}-${joinUserNameLength[1]}字符；数字、字母、下划线）`
              };
            }
            //调用密码检测函数
            pwdCheckStatus = (await passwordCheck(que.user, que.password));
            if (!pwdCheckStatus.pass) {
              return {
                ok: true,
                valid: false,
                msg: pwdCheckStatus.tip
              };
            }
            tmpUsers[que.user] = que.password;
            time = 30;
            //定时器清除暂存表
            setTimeout(function() {
              if (tmpUsers[que.user]) {
                return delete tmpUsers[que.user];
              }
            }, time * 1000);
            joinAgreement = (await options.get("join_agreement"));
            return {
              valid: false,
              ok: true,
              msg: `注册成功，请在${(time / 60).toFixed(2)}分钟内登录，否则账户将被销毁噢。若您成功激活账号，表明您已经同意【用户协议】，正文如下：\n${joinAgreement}`
            };
          }
        }
      }
    } catch (error) {
      err = error;
      console.log(err);
      return {
        ok: false,
        valid: false,
        msg: "服务器内部错误"
      };
    }
  }
};
