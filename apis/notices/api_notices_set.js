// Generated by CoffeeScript 2.6.1
/*

*/
module.exports = {
  method: "post",
  path: "/api/notices/set/{ntceid?}",
  options: {
    validate: {
      params: Joi.object({
        ntceid: Joi.string().pattern(/\d+/)
      }),
      payload: Joi.object({
        receiver: Joi.string(),
        receiverId: Joi.number(),
        msgType: Joi.string(),
        msgAction: Joi.string(),
        msgContent: Joi.string(),
        readTime: Joi.date().timestamp('javascript').allow(null)
      }).unknown()
    }
  },
  handler: async function(req, h) {
    var auth, db, err, que, tmp;
    que = req.payload;
    db = req.server.db;
    auth = req.auth.credentials;
    try {
      if (req.params.ntceid != null) {
        tmp = (await db.icat_notices.findOne({
          where: {
            ntceid: Number(req.params.ntceid)
          }
        }));
        if (que.readTime != null) {
          tmp.readTime = Date.now();
        } else {
          tmp.readTime = null;
        }
        if (tmp.receiverId === auth.uid) {
          await tmp.save();
        } else {
          return {
            ok: false,
            msg: "消息对象的接受者与当前消息接受者不匹配" //新建消息
          };
        }
      } else {
        tmp = (await db.icat_notices.create({
          sender: auth.icat_users_extend.user,
          senderId: auth.uid,
          receiver: que.receiver,
          receiverId: ((await db.icat_users.findOne({
            where: {
              user: que.receiver
            }
          }))).uid,
          msgType: que.msgType,
          msgAction: que.msgAction,
          msgContent: que.msgContent,
          sendTime: Date.now()
        }));
      }
      return {
        ok: true,
        msg: "消息发送成功"
      };
    } catch (error) {
      err = error;
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
