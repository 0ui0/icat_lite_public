// Generated by CoffeeScript 2.6.1
var Op, actionCheck, bindFiles, cacheOpera, options;

actionCheck = new (require("./../../tools/actionCheck/actionCheck_main"))();

({Op} = require("sequelize"));

options = require("../../config/options");

cacheOpera = require("./cacheOpera");

//处理附件关联
bindFiles = async(db, post, files, price = "0") => {
  var file, fileData, i, len, ref, results;
  ref = [...files];
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    file = ref[i];
    if (file.fileid !== -1 && typeof file.fileid === "number") {
      fileData = (await db.icat_files.findOne({
        where: {
          fileid: file.fileid
        }
      }));
      results.push((await post.addIcat_files(fileData, {
        through: {
          whoUse: "files_posts",
          name: "附件售价",
          key: "fee",
          value: price,
          type: "number"
        }
      })));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

module.exports = {
  method: "post",
  path: "/api/posts/set/{pid?}",
  options: {
    validate: {
      params: Joi.object({
        pid: Joi.string().pattern(/^\d+$/)
      }),
      payload: Joi.object({
        title: Joi.string().required(),
        content: Joi.string().required(),
        contentType: Joi.string().valid("markdown", "bbcode", "spider-rss", "sysFile", "note", null).allow(""),
        linkid: Joi.number().integer().greater(-10).default(0).required(),
        files: Joi.array().required(),
        isPrivate: Joi.number().integer().min(0).max(4),
        happens: Joi.array().items(Joi.number().min(1))
      }).unknown(true)
    }
  },
  handler: async function(req, h) {
    var atUsers, auth, author, checkPost, db, dbAtUsers, err, happenid, i, j, k, len, len1, len2, post, posts_allowSubmit, posts_titleLimit, posts_wordsLimit, que, ref, ref1, ref2, ref3, ref4, ref5, stat, t, task, taskStats, upPost, user, validLinkid;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      t = null;
      if (que.contentType !== "note") {
        if (!((5 <= (ref = que.title.length) && ref <= 50))) {
          return {
            ok: false,
            msg: "标题长度要求：5到50个字哦"
          };
        }
        if (!((5 <= (ref1 = que.content.length) && ref1 <= 100000) && que.content.match(/[\u4e00-\u9fa5]{5,}/))) {
          return {
            ok: false,
            msg: "内容要求:以5个以上连续、连续的、连续的中文汉字开头，不可以灌水，不可以多次重复发言，不可以做奇奇怪怪的事情哦！"
          };
        }
      }
      posts_wordsLimit = (await options.get("posts_wordsLimit"));
      posts_allowSubmit = (await options.get("posts_allowSubmit"));
      posts_titleLimit = (await options.get("posts_titleLimit"));
      
      //posts_allowSubmitWorldLevel = await options.get "posts_allowSubmitWorldLevel"
      if (posts_allowSubmit === 0 && auth.icat_users_extend.power < 90) {
        return {
          ok: false,
          msg: "系统已关闭发帖功能"
        };
      }
      /*
      if posts_allowSubmitWorldLevel
        credit_worldLevelCreditid = await options.get "credit_worldLevelCreditid"

        userWorldLevel = await db.icat_credits_calc.sum "calc",
          where:
            creditid:credit_worldLevelCreditid
            uid:auth.icat_users_extend.uid

        console.log auth.icat_users_extend.user+"世界等级:"+userWorldLevel
        console.log "允许发帖等级："+posts_allowSubmitWorldLevel

        if not userWorldLevel or (userWorldLevel and userWorldLevel < posts_allowSubmitWorldLevel)
          return
            ok:false
            msg:"世界等级不足，请前往世界提高世界等级哈"

      */
      if (que.title.length > posts_titleLimit) {
        return {
          ok: false,
          msg: `标题超过允许的最大长度：${posts_titleLimit}`
        };
      }
      if (!((posts_wordsLimit[0] <= (ref2 = que.content.length) && ref2 <= posts_wordsLimit[1]))) {
        return {
          ok: false,
          msg: `发帖字数超出限制：${posts_wordsLimit[0]}<=总字数<=${posts_wordsLimit[1]}`
        };
      }
      if (auth.icat_users_extend.power === -1) {
        return {
          ok: false,
          msg: "权限不足，请等待审核或购买权限恢复道具",
          goShop: true
        };
      }
      if (auth.icat_users_extend.power < 10) {
        return {
          ok: false,
          msg: "权限不足，请前往商店购买恢复道具",
          goShop: true
        };
      }
      // 频繁发帖监测
      if (!actionCheck.checkPass(auth.uid)) {
        return {
          ok: false,
          msg: "您的请求太频繁，请稍后再试",
          needCode: true
        };
      }
      atUsers = que.content.match(/(?<=@)[0-9a-zA-Z_]+(?=\s)/g);
      if (atUsers) {
        if (auth.icat_users_extend.power < 90) {
          if (atUsers.length > 10) {
            return {
              ok: false,
              msg: "召唤用户数量超过限制"
            };
          }
        }
        dbAtUsers = (await db.icat_users.findAll({
          attributes: ["uid", "user"],
          where: {
            user: {
              [Op.or]: atUsers
            }
          }
        }));
      }
      if (!req.params.pid) { //如果没有提供pid说明是发帖linkid=0或回复linkid>0，
        upPost = (await db.icat_posts.findOne({
          where: {
            pid: que.linkid
          }
        }));
        if (upPost && upPost.isLock > 0) {
          return {
            ok: false,
            msg: "帖子已锁定，不能回复啦"
          };
        }
        if (upPost) {
          upPost.calcTimestamp = 0;
          await upPost.save();
        }
        post = (await db.icat_posts.create({
          uid: auth.uid,
          author: auth.user,
          title: que.title,
          content: que.content,
          contentType: que.contentType || "markdown",
          createTime: Date.now(),
          finallyTime: Date.now(),
          createTimestamp: Date.now(),
          updateTimestamp: Date.now(),
          linkid: que.linkid,
          linkChain: upPost ? `${upPost.linkChain},${que.linkid}` : que.linkid,
          isPrivate: que.isPrivate
        }));
        //处理附件关联
        //注意这里迭代的是外部的files对象，担心安全隐患
        await bindFiles(db, post, que.files);
        // 发送消息列表
        if (que.linkid > 0) { //若不是发帖到广场或不存在的上级
          if (upPost.uid !== auth.uid) { //发送回复消息提示
            await db.icat_notices.create({
              sender: auth.user,
              senderId: auth.uid,
              receiver: upPost.author,
              receiverId: upPost.uid,
              msgType: "系统",
              msgAction: "回复了",
              msgContent: JSON.stringify({
                thread: que.linkid,
                reply: post.pid,
                threadTitle: upPost.title,
                replyContent: post.content.slice(0, 21)
              })
            });
          }
        }
        
        // 处理任务
        t = (await db.mysql.transaction());
        taskStats = (await db.icat_stats.findAll({
          where: {
            type: {
              [Op.or]: ["bbs_post", "bbs_reply"]
            },
            uid: auth.uid
          },
          transaction: t
        }));
        for (i = 0, len = taskStats.length; i < len; i++) {
          stat = taskStats[i];
          //搜索对应任务
          task = (await db.icat_tasks.findOne({
            where: {
              taskid: stat.taskid
            },
            transaction: t
          }));
          if ((task.startTimestamp <= (ref3 = Date.now()) && ref3 < task.endTimestamp)) {
            if (stat.type === "bbs_post") {
              checkPost = post.linkid;
            } else if (stat.type === "bbs_reply") {
              checkPost = upPost != null ? upPost.linkid : void 0; //如果上级帖子是0没有linkid
            }
            if (Number(checkPost) === Number((ref4 = task.extra) != null ? ref4.targetPid : void 0)) {
              if (stat.count < stat.target) {
                await stat.increment({
                  count: 1
                }, {
                  transaction: t
                });
              }
            }
          }
        }
        await t.commit(); //否则，是编辑帖子
      } else {
        
        //非管理员禁止编辑帖子
        /*
        if auth.icat_users_extend.power < 90
          return
            ok:false
            msg:"为了保留所有记录，帖子不能直接编辑，要更新内容请复制文本在评论区追加进行"
        */
        post = (await db.icat_posts.findOne({
          where: {
            pid: Number(req.params.pid)
          }
        }));
        if (post.isLock > 0) {
          return {
            ok: false,
            msg: "帖子已锁定，不能编辑哦"
          };
        }
        //评分帖子禁止编辑
        if (post.contentType === "score") {
          return {
            ok: false,
            msg: "评分帖子不能编辑哦" //评分记录不能更改，只能删除
          };
        }
        if (auth.icat_users_extend.power >= 80 || post.uid === auth.uid) {
          author = (await db.icat_users_extend.findOne({
            attributes: ["uid", "power"],
            where: {
              uid: post.uid
            }
          }));
          if (author) {
            if (auth.icat_users_extend.power < author.power) {
              return {
                ok: false,
                msg: "帖子作者的权限大于你的权限哦"
              };
            }
          }
          post.title = que.title;
          post.content = que.content;
          post.contentType = que.contentType;
          post.finallyTime = Date.now();
          post.updateTimestamp = Date.now();
          post.isPrivate = que.isPrivate;
          if (auth.icat_users_extend.power >= 90) {
            if (Number(que.linkid) !== post.linkid) {
              validLinkid = (await db.icat_posts.findOne({
                where: {
                  pid: Number(que.linkid)
                }
              }));
              if (!validLinkid && que.linkid !== 0) {
                return {
                  ok: false,
                  msg: "上级id不存在"
                };
              }
              if (validLinkid || que.linkid === 0) {
                if (que.linkid != null) {
                  post.linkid = Number(que.linkid);
                }
              }
            }
          }
          await post.save();
          //处理附件关联
          //注意这里迭代的是外部的files对象，担心安全隐患
          await bindFiles(db, post, que.files, "0");
        } else {
          return {
            ok: false,
            msg: "权限不足"
          };
        }
      }
      //发送AT消息
      if (atUsers && dbAtUsers) {
        for (j = 0, len1 = dbAtUsers.length; j < len1; j++) {
          user = dbAtUsers[j];
          await (async function(user) {
            return (await db.icat_notices.create({
              sender: auth.user,
              senderId: auth.uid,
              receiver: user.user,
              receiverId: user.uid,
              msgType: "系统",
              msgAction: "召唤了",
              msgContent: JSON.stringify({
                thread: post.pid,
                threadTitle: post.title,
                threadContent: post.content.slice(0, 21)
              })
            }));
          })(user);
        }
      }
      //绑定帖子事件
      if (que.happens) {
        //清除已有关联
        await db.icat_relations.destroy({
          where: {
            whoUse: "posts_happens",
            icatPostPid: post.pid
          }
        });
        ref5 = que.happens;
        for (k = 0, len2 = ref5.length; k < len2; k++) {
          happenid = ref5[k];
          await (async(happenid) => {
            var happen;
            happen = (await db.icat_happens.findOne({
              attributes: ["happenid"],
              where: {
                happenid: happenid
              }
            }));
            if (happen) {
              return (await post.addIcat_happens(happen, {
                through: {
                  whoUse: "posts_happens"
                }
              }));
            }
          })(happenid);
        }
      }
      
      //清除缓存表
      await cacheOpera.clean(db, post);
      return {
        /*
        console.log "缓存已清除："
        console.log delCachePids
        console.log delCacheLinkids
        */
        ok: true,
        msg: "操作成功",
        pid: post.pid //id以便给新建的虚拟帖子能够正常更新数据
      };
    } catch (error) {
      err = error;
      if ((t != null ? t.rollback : void 0) != null) {
        t.rollback();
      }
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
