// Generated by CoffeeScript 2.6.1
/*
pid
*/
var Op, cacheOpera;

({Op} = require("sequelize"));

cacheOpera = require("./cacheOpera");

module.exports = {
  method: "post",
  path: "/api/posts/score/{pid}",
  options: {
    validate: {
      params: Joi.object({
        pid: Joi.string().pattern(/^\d+$/).required()
      }),
      payload: Joi.object({
        creditid: Joi.number(),
        score: Joi.number().min(-20000).max(20000).integer().disallow(0),
        note: Joi.string().max(70)
      })
    }
  },
  handler: async function(req, h) {
    var auth, credit, db, err, notice, pid, post, presentCredit, que, scoreFrom, scoreRecord, scoreTarget, t;
    try {
      db = req.server.db;
      que = req.payload;
      auth = req.auth.credentials;
      pid = Number(req.params.pid);
      t = (await db.mysql.transaction());
      if (auth.icat_users_extend.power < 90) {

      } else {

      }
      post = (await db.icat_posts.findOne({
        attributes: ["pid", "uid", "author", "linkid", "linkChain"],
        where: {
          pid: pid
        },
        transaction: t
      }));
      credit = (await db.icat_credits.findOne({
        attributes: ["creditid", "name", "isUse", "allowScore"],
        where: {
          creditid: que.creditid,
          isUse: 1,
          allowScore: 1
        },
        transaction: t
      }));
      if (!post) {
        await t.commit();
        return {
          ok: false,
          msg: "帖子不存在"
        };
      }
      if (!credit) {
        await t.commit();
        return {
          ok: false,
          msg: "积分不存在或暂不可用"
        };
      }
      if (que.score < 0 && auth.icat_users_extend.power < 90) {
        await t.commit();
        return {
          ok: false,
          msg: "评分不能为负数哦"
        };
      }
      if (post.uid === auth.uid && auth.icat_users_extend.power < 90) {
        await t.commit();
        return {
          ok: false,
          msg: "不能给自己的帖子评分哦"
        };
      }
      //查看当前用户积分是否足够
      presentCredit = (await db.icat_credits_calc.sum("calc", {
        //attributes:["creditCalcid","uid","creditid","creditName","calc","freeze"]
        where: {
          uid: auth.uid,
          creditid: que.creditid,
          freeze: 0
        },
        transaction: t
      }));
      if (presentCredit <= que.score) {
        if (auth.icat_users_extend.power < 90) {
          await t.commit();
          return {
            ok: false,
            msg: "积分不足"
          };
        }
      }
      scoreFrom = (await db.icat_credits_calc.create({
        uid: auth.uid,
        user: auth.user,
        creditid: credit.creditid,
        creditName: credit.name,
        calc: auth.icat_users_extend.power < 90 ? -que.score : 0,
        freeze: 0,
        action: `对帖子评分：${post.pid}`,
        type: "system",
        timestamp: Date.now()
      }, {
        transaction: t
      }));
      scoreTarget = (await db.icat_credits_calc.create({
        uid: post.uid,
        user: post.author,
        creditid: credit.creditid,
        creditName: credit.name,
        calc: que.score,
        freeze: 0,
        action: `帖子被评分：${post.pid}`,
        type: "system",
        timestamp: Date.now()
      }, {
        transaction: t
      }));
      
      //发送评分记录
      scoreRecord = (await db.icat_posts.create({
        uid: auth.uid,
        author: auth.user,
        title: "{{score}}-评分记录",
        content: JSON.stringify({
          score: que.score,
          fromCalcid: scoreFrom.creditCalcid,
          targetCalcid: scoreTarget.creditCalcid,
          note: que.note,
          credit: credit.name,
          creditid: credit.creditid
        }),
        contentType: "score",
        isTop: 10,
        createTime: Date.now(),
        finallyTime: Date.now(),
        createTimestamp: Date.now(),
        updateTimestamp: Date.now(),
        linkid: post.pid,
        linkChain: `${post.linkChain},${post.pid}`
      }, {
        transaction: t
      }));
      //清理帖子缓存
      await cacheOpera.clean(db, scoreRecord);
      notice = (await db.icat_notices.create({
        sender: auth.user,
        senderId: auth.uid,
        receiver: post.author,
        receiverId: post.uid,
        msgType: "系统",
        msgAction: "评分了",
        msgContent: JSON.stringify({
          thread: post.pid,
          score: que.score,
          credit: credit.name,
          creditid: credit.creditid,
          scorePid: scoreRecord.pid
        })
      }, {
        transaction: t
      }));
      await t.commit();
      return {
        ok: true,
        msg: "评分成功"
      };
    } catch (error) {
      err = error;
      await t.rollback();
      console.log(err);
      return {
        ok: false,
        msg: "服务器内部错误"
      };
    }
  }
};
