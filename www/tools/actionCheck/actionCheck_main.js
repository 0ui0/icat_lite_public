// Generated by CoffeeScript 2.6.1
var mail, uuid;

mail = require("../../mail/mail_main");

uuid = require("uuid").v4;

module.exports = class {
  constructor() {
    this.users = {};
  }

  checkPass(uid, clearTime = 5 * 60 * 1000, deltaTime = 3000) {
    var base, delta, user;
    checkType(arguments, [["number", "string"], "number?", "number?"], "actionCheck_main.checkPass()");
    // 定时器，五分钟清除一次统计
    if ((base = this.users)[uid] == null) {
      base[uid] = {
        come: 0,
        times: [],
        timer: null
      };
    }
    user = this.users[uid];
    if (!user.timer) {
      user.timer = setTimeout(function() {
        user.come = 0;
        return console.log(`用户${uid}的频繁统计已清除`);
      }, clearTime);
    }
    user.come += 1;
    user.times.push(new Date().getTime());
    // 获取时间间隔
    if (user.times.length >= 3) {
      user.times = user.times.slice(-2);
    }
    delta = user.times[1] - user.times[0];
    if (user.come > 3 && delta && delta < Math.round(deltaTime)) {
      return false; //命中检测
    } else {
      return true;
    }
  }

  async emailVerify(email, code, auth, db) {
    var err, users;
    checkType(arguments, ["string", "string?", ["object", "null", "undefined"], "object"], "actionCheck_main.emailVerify()");
    try {
      //频繁请求检测
      //返回值可能的状态
      /*
      @1
      {
        returnObj:
      }
      {
        verifySucess:true
      }
      */
      if ((auth != null ? auth.uid : void 0) != null) {
        if (!this.checkPass(auth.uid, 5 * 60 * 1000, 5 * 1000)) { //5分钟清空一次 5秒间隔检测
          return {
            returnObj: {
              ok: false,
              msg: "请求太频繁啦！"
            }
          };
        }
      } else {
        if (!this.checkPass(email, 5 * 60 * 1000, 5 * 1000)) { //5分钟清空一次 5秒间隔检测
          return {
            returnObj: {
              ok: false,
              msg: "请求太频繁啦！"
            }
          };
        }
      }
      //未登录的情况下用的
      users = (await db.icat_users_extend.findAll({
        where: {
          email: email,
          emailVerify: 1
        }
      }));
      if (!code) {
        code = uuid.v4().replace(/-/g, "");
        if ((auth != null ? auth.uid : void 0) != null) {
          $store.tmpUsers.insert(auth.uid, auth.user, code, Date.now() + 5 * 60 * 1000, email);
          //这里无需等待，直接继续
          mail.send({
            from: "master@tmail.o-o.space",
            to: email,
            subject: "喵空间验证码",
            html: `<h1>你的喵空间授权操作的验证码为：</h1>
<p>${code}<p>`
          });
          return {
            returnObj: {
              ok: true,
              msg: `验证码已发送到${email}，请注意查收。`
            }
          };
        } else {
          if (users[0] != null) {
            $store.tmpUsers.insert(users[0].uid, users[0].user, code, Date.now() + 5 * 60 * 1000, email);
            //这里无需等待，直接继续
            mail.send({
              from: "master@tmail.o-o.space",
              to: email,
              subject: "喵空间验证码",
              html: `<h1>你的喵空间验证码为：</h1>
<p>${code}<p>`
            });
            return {
              returnObj: {
                ok: true,
                msg: `验证码已发送到${email}，请注意查收。`
              }
            };
          } else {
            return {
              returnObj: {
                ok: false,
                msg: "邮箱地址不存在。"
              }
            };
          } //如果用户登录
        }
      } else {
        if ((auth != null ? auth.uid : void 0) != null) {
          if ($store.tmpUsers.verify(auth.uid, code)) {
            return {
              verifySucess: true
            };
          } else {
            return {
              returnObj: {
                ok: false,
                msg: "验证码无效或已过期"
              }
            };
          }
        } else {
          if ($store.tmpUsers.verify(users[0].uid, code)) {
            return {
              users: users,
              verifySucess: true
            };
          } else {
            return {
              returnObj: {
                ok: false,
                msg: "验证码无效或已过期"
              }
            };
          } //如果已登录，验证成功
        }
      }
    } catch (error) {
      err = error;
      throw err;
    }
  }

};
