// Generated by CoffeeScript 2.6.1
var copy;

copy = (value) => {
  if (Object.prototype.toString.call(value) === "[object Object]") {
    return {...value};
  } else if (Object.prototype.toString.call(value) === "[object Array]") {
    return [...value];
  } else {
    return value;
  }
};

module.exports = {
  new: function(key, obj) {
    var schema, test;
    schema = Joi.array().items(Joi.string().required(), Joi.object({
      value: [Joi.string().required(), Joi.number().required(), Joi.object().required(), Joi.boolean().required(), Joi.array().required()]
    //get: Joi.function().required()
    //set: Joi.function().required()
    }).required().unknown(true));
    test = schema.validate(Array.from(arguments));
    if (test.error) {
      throw test.error;
    }
    if (["del", "new", "get", "set", "opera", "undo", "redo"].find((item) => {
      return item === key;
    })) {
      throw new Error("关键字是保留字——$store.new()");
    }
    if (this[key]) {
      throw new Error(`要创建的${name}已存在——$store.new()`);
    } else {
      //拷贝一下值，避免发生引用使得历史记录异常
      this[key] = {
        ...obj,
        _history: [copy(obj.value)],
        _arrow: 0,
        opera: function(fn) {
          var copyVal, newVal;
          checkType(arguments, ["function?"], "store's data.opera(fn)");
          //这里有一个问题，如果新值和旧的值相同，不记录历史
          newVal = fn ? fn(copy(this._history[this._arrow])) : null;
          //如果是写入新值
          if (newVal != null) {
            //如果指针指向历史记录末位
            if (this._arrow !== this._history.length - 1) {
              this._history = this._history.slice(0, +this._arrow + 1 || 9e9);
            }
            this.value = newVal;
            copyVal = copy(this.value);
            if (this._history.length <= 10) {
              this._history.push(copyVal);
            } else {
              this._history.splice(0, 1);
              this._history.push(copyVal);
            }
            this._arrow = this._history.length - 1;
          }
          return this._history[this._arrow];
        },
        undo: function() {
          this._arrow--;
          if (this._arrow < 0) {
            this._arrow = 0;
          }
          return this.value = this._history[this._arrow];
        },
        redo: function() {
          this._arrow++;
          if (this._arrow > this._history.length - 1) {
            this._arrow = this._history.length - 1;
          }
          return this.value = this._history[this._arrow];
        },
        //理念是允许方法被修改，但是做一个备份
        copy: copy,
        new: this.new,
        _new: this.new,
        del: this.del,
        _del: this.del
      };
      return this[key];
    }
  },
  del: function(key) {
    checkType(arguments, ["string"], "$store.*.del(key)");
    if (this[key]) {
      return this[key] = void 0;
    } else {
      throw new Error(`要删除的${key}不存在——$store.del()`);
    }
  }
};
