// Generated by CoffeeScript 2.6.1
var checkType, createAPI;

checkType = require("icat_checktype");

module.exports = createAPI = function(apiName, config = {}) {
  var cnName, delAPI, delAfterDeleteData, delBeforeDeleteData, delChangeReturnData, delOptions, delParams, delPath, delPayload, delPower, getAPI, getAfterCreateData, getAllCount, getAllCountWhere, getBeforeCreateData, getChangeReturnData, getFindAll, getFindAllOrder, getFindAllWhere, getFindOne, getFindOneWhere, getOptions, getParams, getPath, getPower, getQuery, idName, setAPI, setAfterUpdateData, setBeforeUpdateData, setChangeReturnData, setCreateData, setFields, setOptions, setParams, setPath, setPayload, setPower, setUpdateData, tableName;
  checkType(arguments, ["string", "object"], "createAPI(apiName,config)");
  tableName = config.tableName || `icat_${apiName}s`;
  idName = config.idName || `${apiName}id`;
  cnName = config.cnName || "数据";
  //get
  getPath = config.getPath || null;
  getParams = config.getParams || {};
  getQuery = config.getQuery || {};
  getOptions = config.getOptions || {};
  getPower = config.getPower || -10;
  getFindAll = config.getFindAll || function() {
    return {};
  };
  getFindAllOrder = config.getFindAllOrder || function() {
    return [];
  };
  getFindAllWhere = config.getFindAllWhere || function() {
    return {};
  };
  getFindOne = config.getFindOne || function() {
    return {};
  };
  getFindOneWhere = config.getFindOneWhere || function() {
    return {};
  };
  getAllCount = config.getAllCount || function() {
    return [];
  };
  getAllCountWhere = config.getAllCountWhere || function() {
    return {};
  };
  getBeforeCreateData = config.getBeforeCreateData || function() {};
  getAfterCreateData = config.getAfterCreateData || function() {};
  getChangeReturnData = config.getChangeReturnData || function() {};
  //set
  setPath = config.setPath || null;
  setParams = config.setParams || {};
  setPayload = config.setPayload || {};
  setOptions = config.setOptions || {};
  setPower = config.setPower || 90;
  setFields = config.setFields || [];
  setUpdateData = config.setUpdateData || function() {};
  setCreateData = config.setCreateData || function() {};
  setBeforeUpdateData = config.setBeforeUpdateData || function() {};
  setAfterUpdateData = config.setAfterUpdateData || function() {};
  setChangeReturnData = config.setChangeReturnData || function() {};
  //del
  delPath = config.delPath || null;
  delParams = config.delParams || {};
  delPayload = config.delPayload || {};
  delOptions = config.delOptions || {};
  delPower = config.delPower || 90;
  delBeforeDeleteData = config.delBeforeDeleteData || function() {};
  delAfterDeleteData = config.delAfterDeleteData || function() {};
  delChangeReturnData = config.delChangeReturnData || function() {};
  getAPI = {
    method: "get",
    path: (function() {
      if (getPath) {
        if (typeof getPath === "function") {
          return getPath({tableName, idName, cnName});
        } else if (typeof getPath === "string") {
          return getPath;
        } else {
          throw new Error("getPath格式错误");
        }
      } else {
        return `/api/${apiName}s/get/{${idName}?}`;
      }
    })(),
    options: {
      auth: {
        mode: "try"
      },
      validate: {
        params: Joi.object({
          [idName]: Joi.string().pattern(/^\d+$/),
          ...getParams
        }),
        query: Joi.object({
          offset: Joi.string().pattern(/^\d+$/).default("0"),
          //limit:Joi.string().pattern(/^[0-9]$|^1[0-5]$/).default("8") #最多15
          limit: Joi.number().max(150).default(32),
          order: Joi.string().pattern(/desc|asc/i).default("asc"),
          ...getQuery
        })
      },
      ...getOptions
    },
    handler: async function(req, h) {
      var allCount, auth, data, db, err, par, que, returnData, sendParams;
      db = req.server.db;
      que = req.query;
      par = req.params;
      auth = req.auth.credentials;
      try {
        /*
        if getPower > 0
          if auth and auth.icat_users_extend.power < getPower
            return
              ok:false
              msg:"权限不足"
          unless auth
            return
              ok:false
              msg:"权限不足"
        */
        if (auth) {
          if (typeof getPower === "number") {
            if (auth.icat_users_extend.power < getPower) {
              return {
                ok: false,
                msg: "权限不足"
              };
            }
          } else if (typeof getPower === "function") {
            if (!(await getPower(sendParams))) {
              return {
                ok: false,
                msg: "权限不足"
              };
            }
          } else {
            return {
              ok: false,
              msg: "缺少getPower"
            };
          }
        }
        sendParams = {
          req: req,
          h: h,
          db: db,
          que: que,
          par: par,
          auth: auth,
          config: config
        };
        await getBeforeCreateData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        data = par[idName] ? (await db[tableName].findOne({
          where: {
            [idName]: Number(par[idName]),
            ...((await getFindOneWhere(sendParams)))
          },
          ...((await getFindOne(sendParams)))
        })) : (await db[tableName].findAll({
          order: [[idName, que.order], ...((await getFindAllOrder(sendParams)))],
          limit: Number(que.limit),
          offset: Number(que.offset),
          where: {...((await getFindAllWhere(sendParams)))},
          ...getFindAll(sendParams)
        }));
        allCount = (await db[tableName].count({
          where: {...((await getAllCountWhere(sendParams)))},
          ...getAllCount(sendParams)
        }));
        sendParams.data = data;
        await getAfterCreateData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        returnData = {
          ok: true,
          data: sendParams.data,
          allCount: allCount
        };
        sendParams.returnData = returnData;
        await getChangeReturnData(sendParams);
        return sendParams.returnData;
      } catch (error) {
        err = error;
        console.log(err);
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  };
  setAPI = {
    method: "post",
    path: (function() {
      if (setPath) {
        if (typeof setPath === "function") {
          return setPath({tableName, idName, cnName});
        } else if (typeof setPath === "string") {
          return setPath;
        } else {
          throw new Error("setPath格式错误");
        }
      } else {
        return `/api/${apiName}s/set/{${idName}?}`;
      }
    })(),
    options: {
      payload: {
        maxBytes: 10 * 1024 * 1024 * 1024
      },
      validate: {
        params: Joi.object({
          [idName]: Joi.string().pattern(/^\d+$/),
          ...setParams
        }),
        payload: Joi.object({...setPayload}).unknown(true)
      },
      ...setOptions
    },
    handler: async function(req, h) {
      var auth, content, data, db, err, field, i, j, len, len1, par, que, sendParams, t;
      try {
        db = req.server.db;
        que = req.payload;
        par = req.params;
        auth = req.auth.credentials;
        sendParams = {
          req: req,
          h: h,
          db: db,
          que: que,
          par: par,
          auth: auth,
          config: config
        };
        if (typeof setPower === "number") {
          if (auth.icat_users_extend.power < setPower) {
            return {
              ok: false,
              msg: "权限不足"
            };
          }
        } else if (typeof setPower === "function") {
          if (!(await setPower(sendParams))) {
            return {
              ok: false,
              msg: "权限不足"
            };
          }
        } else {
          return {
            ok: false,
            msg: "缺少setPower"
          };
        }
        if (!setFields[0]) {
          console.error("缺少允许设置的字段setFields");
          return {
            ok: false,
            msg: "setFields错误，请检查服务器"
          };
        }
        t = (await db.mysql.transaction());
        sendParams.t = t;
        data = null;
        await setBeforeUpdateData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        if (par[idName]) {
          data = (await db[tableName].findOne({
            where: {
              [idName]: Number(par[idName])
            },
            transaction: t
          }));
          for (i = 0, len = setFields.length; i < len; i++) {
            field = setFields[i];
            ((field) => {
              return data[field] = que[field];
            })(field);
          }
          sendParams.updateData = data;
          await setUpdateData(sendParams);
          await data.save({
            transaction: t
          });
        } else {
          content = {};
          for (j = 0, len1 = setFields.length; j < len1; j++) {
            field = setFields[j];
            ((field) => {
              return content[field] = que[field];
            })(field);
          }
          sendParams.createData = content;
          await setCreateData(sendParams);
          data = (await db[tableName].create(content, {
            transaction: t
          }));
        }
        await setAfterUpdateData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        sendParams.returnData = {
          ok: true,
          data: data, //结果带一下数据
          msg: `${cnName}修改成功`,
          ...(!par[idName] ? {
            [idName]: data[idName]
          } : void 0)
        };
        await setChangeReturnData(sendParams);
        await t.commit();
        return sendParams.returnData;
      } catch (error) {
        err = error;
        console.log(err);
        if (t) {
          await t.rollback();
        }
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  };
  delAPI = {
    method: "post",
    path: (function() {
      if (delPath) {
        if (typeof delPath === "function") {
          return delPath({tableName, idName, cnName});
        } else if (typeof delPath === "string") {
          return delPath;
        } else {
          throw new Error("delPath格式错误");
        }
      } else {
        return `/api/${apiName}s/del/{${idName}}`;
      }
    })(),
    options: {
      validate: {
        params: Joi.object({
          [idName]: Joi.string().pattern(/^\d+$/),
          ...delParams
        }),
        ...(Object.keys(delPayload).length > 0 ? {
          payload: Joi.object({...delPayload})
        } : void 0)
      },
      ...delOptions
    },
    handler: async function(req, h) {
      var auth, data, db, err, par, que, sendParams, t;
      try {
        db = req.server.db;
        que = req.query;
        par = req.params;
        auth = req.auth.credentials;
        sendParams = {
          req: req,
          h: h,
          db: db,
          que: que,
          par: par,
          auth: auth,
          config: config
        };
        if (typeof delPower === "number") {
          if (auth.icat_users_extend.power < delPower) {
            return {
              ok: false,
              msg: "权限不足"
            };
          }
        } else if (typeof delPower === "function") {
          if (!(await delPower(sendParams))) {
            return {
              ok: false,
              msg: "权限不足"
            };
          }
        } else {
          return {
            ok: false,
            msg: "缺少delPower"
          };
        }
        t = (await db.mysql.transaction());
        sendParams.t = t;
        await delBeforeDeleteData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        data = (await db[tableName].findOne({
          where: {
            [idName]: Number(par[idName])
          },
          transaction: t
        }));
        if (!data) {
          await t.commit();
          return {
            ok: false,
            msg: `${cnName}不存在`
          };
        }
        await data.destroy({
          transaction: t
        });
        await delAfterDeleteData(sendParams);
        if (sendParams.stop) {
          return sendParams.stop;
        }
        sendParams.returnData = {
          ok: true,
          msg: `${cnName}删除成功`
        };
        await delChangeReturnData(sendParams);
        await t.commit();
        return sendParams.returnData;
      } catch (error) {
        err = error;
        console.log(err);
        if (t) {
          await t.rollback();
        }
        return {
          ok: false,
          msg: "服务器内部错误"
        };
      }
    }
  };
  return {
    get: getAPI,
    set: setAPI,
    del: delAPI
  };
};
