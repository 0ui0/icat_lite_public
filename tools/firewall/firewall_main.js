// Generated by CoffeeScript 2.6.1
var Op, isbot, options;

isbot = require("isbot");

({Op} = require("sequelize"));

options = require("../../config/options");

module.exports = {
  init: function(server) {
    //验证，防火墙
    return server.ext({
      type: "onRequest",
      method: async(req, h) => {
        var allowIp, allowedIp, checkBot, db, err, global_firewallAllowIpList, global_firewallAllowSpider, global_firewallAllowTimeDelta, global_firewallAllowUser, global_firewallMode, global_firewallRefuseIpList, global_firewallSwitch, i, ipUser, j, len, len1, refuseIp, userIp, xFF, xRI;
        db = req.server.db;
        try {
          return h.continue;
          global_firewallSwitch = (await options.get("global_firewallSwitch"));
          global_firewallAllowSpider = (await options.get("global_firewallAllowSpider"));
          global_firewallAllowUser = (await options.get("global_firewallAllowUser"));
          global_firewallAllowTimeDelta = (await options.get("global_firewallAllowTimeDelta"));
          global_firewallMode = (await options.get("global_firewallMode"));
          global_firewallRefuseIpList = (await options.get("global_firewallRefuseIpList"));
          global_firewallAllowIpList = (await options.get("global_firewallAllowIpList"));
          xFF = req.headers["x-forward-for"];
          xRI = req.headers["x-real-ip"];
          //如果不是已注册的用户ip，需要行为验证
          userIp = xFF ? typeof xFF === "array" ? xFF[0] : xFF : xRI ? xRI : req.info.remoteAddress;
          if (global_firewallMode === 1) {
            for (i = 0, len = global_firewallRefuseIpList.length; i < len; i++) {
              refuseIp = global_firewallRefuseIpList[i];
              if (new RegExp(refuseIp, "g").exec(userIp)) {
                return h.response("401 未授权").code(401).takeover();
              }
            }
          } else {
            for (j = 0, len1 = global_firewallAllowIpList.length; j < len1; j++) {
              allowIp = global_firewallAllowIpList[j];
              if (!new RegExp(refuseIp, "g").exec(userIp)) {
                return h.response("401 未授权").code(401).takeover();
              }
            }
          }
          if (/185\.191\./g.exec(userIp)) {
            return h.redirect("http://" + userIp).code(301).takeover();
          }
          if (!global_firewallSwitch) { //开关
            return h.continue;
          }
          if (global_firewallAllowSpider) {
            checkBot = isbot(req.headers["user-agent"]);
            if (checkBot) { //如果是爬虫，直接放行
              return h.continue;
            }
          }
          //验证页面放行
          if (req.path.match(/^\/iAmUser/g)) {
            return h.continue;
          }
          //支付回调api放行
          if (req.path.match(/^\/api\/invite/g)) {
            return h.continue;
          }
          if (req.path.match(/^\/api\/pay/g)) {
            return h.continue;
          }
          //logo读取放行
          if (req.url.href.match(/logo\d{0,}\.(png|svg)/g)) {
            return h.continue;
          }
          
          //本地放行
          /*
          if userIp is "127.0.0.1"
            return h.continue
          */
          ipUser = (await db.icat_users_extend.findOne({
            attributes: ["uid"],
            where: {
              lastLoginIp: userIp
            }
          }));
          if (ipUser && global_firewallAllowUser) { //ipUser #如果是可信ip的用户可以跳过验证 取消该策略，所有人必须验证
            return h.continue; //需要行为验证
          } else {
            //清除10分钟需重新验证
            await db.icat_cache_ips.destroy({
              where: {
                timestamp: {
                  [Op.lt]: Date.now() - global_firewallAllowTimeDelta * 60 * 1000
                }
              }
            });
            allowedIp = (await db.icat_cache_ips.findOne({
              where: {
                ip: userIp
              }
            }));
            if (allowedIp) {
              return h.continue;
            } else {
              //行为验证
              console.log(`time ${new Date()}`);
              console.log(`ip ${userIp} 触发行为验证`);
              console.log(`path ${req.path}`);
              return h.redirect(`/iAmUser?path=${encodeURIComponent(req.path)}`).takeover();
            }
          }
        } catch (error) {
          err = error;
          console.log(err);
          return h.response("【服务器菌】好像出问题了，呜呜呜┭┮﹏┭┮").code(500).takeover();
        }
      }
    });
  }
};
