// Generated by CoffeeScript 2.6.1
var Hapi, alterAll, cfg1, cfg2, cleardb, config, db, firewall, fs, getArg, init, mail, pathLib, routes, server1, server2, tools, urlLib;

getArg = function(key) {
  var arrIndex;
  arrIndex = process.argv.indexOf(`--${key}`);
  if (arrIndex === -1) {
    return void 0;
  } else {
    return process.argv[arrIndex + 1];
  }
};

global.argCfg = {
  port: getArg("port"),
  host: getArg("host"),
  pwdKey: getArg("pwdKey"),
  cookiePwd: getArg("cookiePwd"),
  dbHost: getArg("dbHost"),
  dbPost: getArg("dbPort"),
  dbName: getArg("dbName"),
  dbUser: getArg("dbUser"),
  dbPassword: getArg("dbPassword")
};

cleardb = process.argv.includes("--cleardb");

alterAll = process.argv.includes("--alterAll");

Hapi = require("@hapi/hapi");

pathLib = require("path");

config = require("./config/config");

tools = require("./config/tools");

routes = require("./apis/api_routes");

global.checkType = require("icat_checktype");

global.Joi = require("joi");

global.Jwt = require("@hapi/jwt");

urlLib = require("url");

fs = require("fs-extra");

db = require("./database/db_main");

mail = require("./mail/mail_main"); //注意这里引用了db_main

firewall = require("./tools/firewall/firewall_main");

//校验jwt令牌
Jwt.verifyToken = (artifact, secert, options = {}) => {
  var err, token;
  try {
    token = Jwt.token.decode(artifact);
    Jwt.token.verify(token, secert, options);
    return {
      valid: true
    };
  } catch (error) {
    err = error;
    return {
      valid: false,
      error: err.message
    };
  }
};

global.$store = require("./tools/store/store_main");

$store.new("tmpUsers", {
  value: {},
  insert: function(uid, user, code, expires, email) {
    checkType(arguments, ["number", "string", "string", "number", "string"], "$store.tmpUsers.insert(uid,user,code,expires,email)");
    return this.opera((value) => {
      value[uid] = {
        user: user,
        code: code,
        expires: expires,
        email: email
      };
      return value;
    });
  },
  verify: function(uid, code) {
    var user, usersObj;
    usersObj = this.opera();
    //console.log "usersObj",usersObj
    user = usersObj[uid];
    if ((user != null ? user.code : void 0) === code && (user != null ? user.expires : void 0) > Date.now()) {
      return true;
    } else {
      return false;
    }
  }
});

// 443端口
cfg1 = {
  port: config.port,
  host: config.host,
  state: {
    //strictHeader: false #非严格解析cookie
    ignoreErrors: true
  },
  routes: {
    cors: {
      credentials: true,
      origin: ["http://localhost", "http://localhost:8080", "http://192.168.2.78", "http://192.168.2.78:8080", "http://[::1]", "http://[::1]:8080", "http://127.0.0.1", "http://127.0.0.1:8080"]
    },
    files: {
      relativeTo: pathLib.resolve(config.public)
    },
    validate: {
      //统一joi校验失败处理
      failAction: function(req, h, err) {
        var ref, ref1, ref2, ref3;
        console.log(err);
        return h.response({
          ok: false,
          msg: "*错误*：" + (((ref = err.details) != null ? ref[0].message : void 0) ? (ref1 = err.details) != null ? ref1[0].message : void 0 : (ref2 = err.output) != null ? (ref3 = ref2.payload) != null ? ref3.message : void 0 : void 0)
        }).takeover();
      }
    }
  },
  tls: config.tls
};

// 80端口
cfg2 = {...cfg1};

cfg2.port = 80;

cfg2.tls = void 0;

server1 = new Hapi.server(cfg1);

server2 = new Hapi.server(cfg2);

init = async function(server) {
  var Nes;
  await fs.ensureDir(pathLib.resolve(__dirname, "www/data"));
  await fs.ensureDir(pathLib.resolve(__dirname, "www/public/statics/block"));
  await fs.ensureDir(pathLib.resolve(__dirname, "www/dist/statics/block"));
  await fs.ensureDir(pathLib.resolve(__dirname, "www/public/statics/system"));
  await fs.ensureDir(pathLib.resolve(__dirname, "www/dist/statics/system"));
  await fs.ensureDir(pathLib.resolve(__dirname, "certs"));
  server.db = db;
  server.mail = mail;
  // plugins
  await server.register(require("@hapi/inert"));
  await server.register(require("@hapi/cookie"));
  await server.register({
    plugin: Nes = require("@hapi/nes")
  });
  await server.register(require("@hapi/vision"));
  
  // vision
  server.views({
    engines: {
      js: {
        compile: (fileStr, opt) => {
          var data, err, render;
          try {
            if (!global.window) {
              global.window = global.document = global.requestAnimationFrame = void 0;
            }
            global.m = require("mithril");
            render = require("mithril-node-render");
            data = require(opt.filename);
            return (context) => {
              var html;
              html = render.sync(data, context);
              return "<!DOCTYPE html>" + html;
            };
          } catch (error) {
            err = error;
            return console.log(err);
          }
        }
      }
    },
    relativeTo: __dirname,
    path: "render"
  });
  
  // auth strategy
  server.auth.strategy("session", "cookie", {
    cookie: {
      name: "session-id",
      password: config.password,
      isHttpOnly: false, //控制是否允许JS携带cookie，设置为no表示允许
      isSecure: false, //如果使用了isSameSite必须启用isSecure。isSameSite是给技术宅iframe跨域用的 允许第三方发送cookie，否则无法登录
      //isSameSite:"None"
      path: "/"
    },
    //ttl: 60*60*1000
    keepAlive: false,
    validate: async function(req, sess) {
      var e, tmp, user;
      //奇怪的sess数组，临时解决方案
      if (sess[0]) {
        sess = sess[0];
      }
      try {
        user = (await db.icat_users.findOne({
          where: {
            uid: sess.uid
          },
          include: [
            {
              model: db.icat_users_extend
            }
          ]
        }));
        /*
        include:
          model: db.icat_posts
        */
        if (!user) {
          return {
            isValid: false
          };
        } else {
          return {
            isValid: true,
            credentials: {
              userDir: (tmp = 10 ** 10 + user.uid * 1 + "").slice(1, tmp.length).match(/../g).join("/"),
              ...user.dataValues
            }
          };
        }
      } catch (error) {
        e = error;
        return console.log(e);
      }
    }
  });
  // default session
  server.auth.default("session");
  //error

  //防火墙
  await firewall.init(server);
  // all routes
  await routes(server);
  // socket config
  await server.subscription("/robot", {
    onSubscribe: async(socket, path, params) => {
      return (await socket.send({
        msg: "连接建立",
        time: Date.now(),
        user: "系统",
        uid: 0
      }));
    }
  });
  // start server
  await server.start();
  return console.log(`server start at ${server.info.uri}`);
};

(async function() {
  var err;
  try {
    //静态文件服务器
    //初始化数据库
    await db.init(null, null, cleardb, alterAll);
    console.log("数据库初始化完毕");
    await mail.init();
    console.log("邮件初始化完毕");
    //导入dz数据
    //await require("./importData")(db)

    //启动服务器
    await init(server1);
    return (await init(server2));
  } catch (error) {
    err = error;
    return console.log(err);
  }
})();
